[
  {
    "objectID": "topics/ggplot/lab_gg1.html",
    "href": "topics/ggplot/lab_gg1.html",
    "title": "Basics in ggplot",
    "section": "",
    "text": "We will use R in this course for generating plots from different biological data that are of higher quality and standard for publications. To do this, you will brush-up your memory on some important aspects of R that are important for this course below:"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#wide-format",
    "href": "topics/ggplot/lab_gg1.html#wide-format",
    "title": "Basics in ggplot",
    "section": "1.1 Wide format",
    "text": "1.1 Wide format\nA quick preview:\nCounts Table\n\n\n\n\n\n\nSample_1\nSample_2\nSample_3\nSample_4\n\n\n\n\nENSG00000000003\n321\n303\n204\n492\n\n\nENSG00000000005\n0\n0\n0\n0\n\n\nENSG00000000419\n696\n660\n472\n951\n\n\nENSG00000000457\n59\n54\n44\n109\n\n\nENSG00000000460\n399\n405\n236\n445\n\n\nENSG00000000938\n0\n0\n0\n0\n\n\n\n\n\n\n\nAnd we usually have our metadata related to the samples in another table like below:\nMetadata Table\n\n\n\n\n\nSample_ID\nSample_Name\nTime\nReplicate\nCell\n\n\n\n\nSample_1\nt0_A\nt0\nA\nA431\n\n\nSample_2\nt0_B\nt0\nB\nA431\n\n\nSample_3\nt0_C\nt0\nC\nA431\n\n\nSample_4\nt2_A\nt2\nA\nA431\n\n\n\n\n\n\n\n\nWide format data is called “wide” because it typically has a lot of columns which stretch widely across the page or your computer screen.\nMost of us are familiar with looking at wide format data\n\nIt is convenient and we are more used to looking at data this way in our Excel sheets.\nIt often lets you see more of the data, at one time, on your screen"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#long-format",
    "href": "topics/ggplot/lab_gg1.html#long-format",
    "title": "Basics in ggplot",
    "section": "1.2 Long format",
    "text": "1.2 Long format\nBelow is glimpse how the long format of the same data look like:\n\n\n\n\n\nGene\nSamples\ncount\n\n\n\n\nENSG00000000003\nSample_1\n321\n\n\nENSG00000000005\nSample_1\n0\n\n\nENSG00000000419\nSample_1\n696\n\n\nENSG00000000457\nSample_1\n59\n\n\nENSG00000000460\nSample_1\n399\n\n\nENSG00000000938\nSample_1\n0\n\n\nENSG00000000003\nSample_2\n303\n\n\nENSG00000000005\nSample_2\n0\n\n\nENSG00000000419\nSample_2\n660\n\n\nENSG00000000457\nSample_2\n54\n\n\n\n\n\n\n\nOr to be even more complete and precise:\n\n\n\n\n\nSample_ID\nSample_Name\nTime\nReplicate\nCell\nGene\ncount\n\n\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000003\n321\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000005\n0\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000419\n696\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000457\n59\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000460\n399\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000938\n0\n\n\nSample_2\nt0_B\nt0\nB\nA431\nENSG00000000003\n303\n\n\nSample_2\nt0_B\nt0\nB\nA431\nENSG00000000005\n0\n\n\nSample_2\nt0_B\nt0\nB\nA431\nENSG00000000419\n660\n\n\nSample_2\nt0_B\nt0\nB\nA431\nENSG00000000457\n54\n\n\n\n\n\n\n\n\nLong format data is typically less familiar to most humans\n\nIt seems awfully hard to get a good look at all (or most) of it\nIt seems like it would require more storage on your hard disk\nIt seems like it would be harder to enter data in a long format"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#which-is-better",
    "href": "topics/ggplot/lab_gg1.html#which-is-better",
    "title": "Basics in ggplot",
    "section": "1.3 Which is better?",
    "text": "1.3 Which is better?\n\nWell, there are some contexts where putting things in wide format is computationally efficient because you can treat data in a matrix format and to efficient matrix calculations on it.\nHowever, adding data to wide format data sets is very hard:\n\nIt is very difficult to conceive of analytic schemes that apply generally across all wide-format data sets.\nMany tools in R want data in long format like ggplot\nThe long format for data corresponds to the relational model for storing data, which is the model used in most modern data bases like the SQL family of data base systems.\n\nA more technical treatment of wide versus long data requires some terminology:\n\nIdentifier variables are often categorical things that cross-classify observations into categories.\nMeasured variables are the names given to properties or characteristics that you can go out and measure.\nValues are the values that you measure are record for any particular measured variable.\n\nIn any particular data set, what you might want to call an Identifier variables versus a Measured variables can not always be entirely clear.\n\nOther people might choose to define things differently.\n\nHowever, to my mind, it is less important to be able to precisely recognize these three entities in every possible situation (where there might be some fuzziness about which is which)\nAnd it is more important to understand how Identifier variables, Measured variables, and Values interact and behave when we are transforming data between wide and long formats."
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#using-reshape2",
    "href": "topics/ggplot/lab_gg1.html#using-reshape2",
    "title": "Basics in ggplot",
    "section": "2.1 Using reshape2",
    "text": "2.1 Using reshape2\nBy using the melt() function from the reshape2 package we can convert the wide-formatted data into long-formatted data! Here, to combine the metadata table to the gene counts table, we will also use the merge() function like we did before!\n\nlibrary(reshape2)\ngc &lt;- read.table(\"../../data/counts_raw.txt\", header = T, row.names = 1, sep = \"\\t\")\nmd &lt;- read.table(\"../../data/metadata.csv\", header = T, sep = \";\")\nrownames(md) &lt;- md$Sample_ID\n\n#merging gene counts table with metadata\nmerged_data_wide &lt;- merge(md, t(gc), by = 0)\n#removing redundant columns\nmerged_data_wide$Row.names &lt;- NULL\n\nmerged_data_long &lt;- melt(merged_data_wide, id.vars = c(\"Sample_ID\",\"Sample_Name\",\"Time\",\"Replicate\",\"Cell\"), variable.name = \"Gene\", value.name = \"count\")  \nhead(merged_data_long)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#using-tidyr",
    "href": "topics/ggplot/lab_gg1.html#using-tidyr",
    "title": "Basics in ggplot",
    "section": "2.2 Using tidyr",
    "text": "2.2 Using tidyr\nIf you are more familiar with using tidyverse or tidyr packages, you can combine tables by join() and then use gather() to make long formatted data in the same command. This is a powerful and more cleaner way of dealing with data in R.\n\nlibrary(tidyverse)\ngc_long &lt;- gc %&gt;%\n  rownames_to_column(var = \"Gene\") %&gt;%\n  gather(Sample_ID, count, -Gene) %&gt;% \n  full_join(md, by = \"Sample_ID\") %&gt;% \n  select(Sample_ID, everything()) %&gt;% \n  select(-c(Gene,count), c(Gene,count)) \ngc_long %&gt;%\n  head(10)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#base",
    "href": "topics/ggplot/lab_gg1.html#base",
    "title": "Basics in ggplot",
    "section": "4.1 Base",
    "text": "4.1 Base\nR is an excellent tool for creating graphs and plots. The graphic capabilities and functions provided by the base R installation is called the base R graphics. Numerous packages exist to extend the functionality of base graphics.\nWe can try out plotting a few of the common plot types. Let’s start with a scatterplot. First we create a data.frame as this is the most commonly used data object.\n\ndfr &lt;- data.frame(a=sample(1:100,10),b=sample(1:100,10))\n\nNow we have a dataframe with two continuous variables that can be plotted against each other.\n\nplot(dfr$a,dfr$b)\n\n\n\n\n\n\n\n\nThis is probably the simplest and most basic plots. We can modify the x and y axis labels.\n\nplot(dfr$a,dfr$b,xlab=\"Variable a\",ylab=\"Variable b\")\n\n\n\n\n\n\n\n\nWe can change the point to a line.\n\nplot(dfr$a,dfr$b,xlab=\"Variable a\",ylab=\"Variable b\",type=\"b\")\n\n\n\n\n\n\n\n\nLet’s add a categorical column to our dataframe.\n\ndfr$cat &lt;- rep(c(\"C1\",\"C2\"),each=5)\n\nAnd then colour the points by category.\n\n# subset data\ndfr_c1 &lt;- subset(dfr,dfr$cat == \"C1\")\ndfr_c2 &lt;- subset(dfr,dfr$cat == \"C2\")\n\nplot(dfr_c1$a,dfr_c1$b,xlab=\"Variable a\",ylab=\"Variable b\",col=\"red\",pch=1)\npoints(dfr_c2$a,dfr_c2$b,col=\"blue\",pch=2)\n\nlegend(x=\"topright\",legend=c(\"C1\",\"C2\"),\n       col=c(\"red\",\"blue\"),pch=c(1,2))\n\n\n\n\n\n\n\n\nLet’s create a barplot.\n\nldr &lt;- data.frame(a=letters[1:10],b=sample(1:50,10))\nbarplot(ldr$b,names.arg=ldr$a)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#grid",
    "href": "topics/ggplot/lab_gg1.html#grid",
    "title": "Basics in ggplot",
    "section": "4.2 Grid",
    "text": "4.2 Grid\nGrid graphics have a completely different underlying framework compared to base graphics. Generally, base graphics and grid graphics cannot be plotted together. The most popular grid-graphics based plotting library is ggplot2.\nLet’s create the same plot as before using ggplot2. Make sure you have the package installed.\n\nlibrary(ggplot2)\n\nggplot(dfr)+\n  geom_point(mapping = aes(x=a,y=b,colour=cat))+\n  labs(x=\"Variable a\",y=\"Variable b\")\n\n\n\n\n\n\n\n\nIt is generally easier and more consistent to create plots using the ggplot2 package compared to the base graphics.\nLet’s create a barplot as well.\n\nggplot(ldr,aes(x=a,y=b))+\n  geom_col()"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#saving-images",
    "href": "topics/ggplot/lab_gg1.html#saving-images",
    "title": "Basics in ggplot",
    "section": "4.3 Saving images",
    "text": "4.3 Saving images\nLet’s take a look at saving plots.\n\n\n\n\n\n\nNote\n\n\n\nThis part is just to give you a quick look into how you can save images from R terminal quickly. The different format of images will be explained in a lecture later.\n\n\n\n4.3.1 Base graphics\nThe general idea for saving plots is open a graphics device, create the plot and then close the device. We will use png here. Check out ?png for the arguments and other devices.\n\ndfr &lt;- data.frame(a=sample(1:100,10),b=sample(1:100,10))\n\npng(filename=\"plot-base.png\")\nplot(dfr$a,dfr$b)\ndev.off()\n\n\n\n4.3.2 ggplot2\nThe same idea can be applied to ggplot2, but in a slightly different way. First save the file to a variable, and then export the plot.\n\np &lt;- ggplot(dfr,aes(a,b)) + geom_point()\n\npng(filename=\"plot-ggplot-1.png\")\nprint(p)\ndev.off()\n\n\n\n\n\n\n\nTip\n\n\n\nggplot2 also has another easier helper function to export images.\n\nggsave(filename=\"plot-ggplot-2.png\",plot=p)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#geoms",
    "href": "topics/ggplot/lab_gg1.html#geoms",
    "title": "Basics in ggplot",
    "section": "5.1 Geoms",
    "text": "5.1 Geoms\nIn the previous section we saw very quickly how to use ggplot. Let’s take a look at it again a bit more carefully. For this let’s first look into a simple data that is available in R. We use the iris data for this to start with.\nThis dataset has four continuous variables and one categorical variable. It is important to remember about the data type when plotting graphs\n\ndata(\"iris\")\nhead(iris)\n\n\n  \n\n\n\nWhen we initiate the ggplot object using the data, it just creates a blank plot!\n\nggplot(iris) \n\n\n\n\n\n\n\n\nNow we can specify what we want on the x and y axes using aesthetic mapping. And we specify the geometric using geoms.\n\n\n\n\n\n\nNote\n\n\n\nthat the variable names do not have double quotes \"\" like in base plots.\n\n\n\nggplot(data=iris)+\n  geom_point(mapping=aes(x=Petal.Length,y=Petal.Width))\n\n\n\n\n\n\n\n\n\n5.1.1 Multiple geoms\nFurther geoms can be added. For example let’s add a regression line. When multiple geoms with the same aesthetics are used, they can be specified as a common mapping.\n\n\n\n\n\n\nNote\n\n\n\nthat the order in which geoms are plotted depends on the order in which the geoms are supplied in the code. In the code below, the points are plotted first and then the regression line.\n\n\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point()+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\nThere are many other geoms and you can find most of them here in this cheatsheet\n\n\n5.1.2 Gene counts data\nLet’s also try to use ggplot for a “more common” gene counts dataset. Let’s use the merged_data_long or the gc_long object we created in the earlier session.\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count +1)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can notice that the ggplot sorts the factors or vaiables alpha-numerically, like in the case above with Sample_Name.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThere is a trick that you can use to give the order of variables manually. The example is shown below:\n\ngc_long$Sample_Name &lt;- factor(gc_long$Sample_Name, levels = c(\"t0_A\",\"t0_B\",\"t0_C\",\"t2_A\",\"t2_B\",\"t2_C\",\"t6_A\",\"t6_B\",\"t6_C\",\"t24_A\",\"t24_B\",\"t24_C\"))\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1)))"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#colors",
    "href": "topics/ggplot/lab_gg1.html#colors",
    "title": "Basics in ggplot",
    "section": "5.2 Colors",
    "text": "5.2 Colors\n\n5.2.1 Iris data\nFirst, if we look at the iris data, we can use the categorical column Species to color the points. The color aesthetic is used by geom_point and geom_smooth. Three different regression lines are now drawn. Notice that a legend is automatically created\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width,color=Species))+\n  geom_point()+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\nIf we wanted to keep a common regression line while keeping the colors for the points, we could specify color aesthetic only for geom_point.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n5.2.2 GC data\nSimilarly, we can do the same with the gene counts data.\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1), color = Time))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe can also use the fill aesthetic to give it a better look.\n\n\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1), fill = Time))\n\n\n\n\n\n\n\n\n\n\n5.2.3 Discrete colors\nWe can change the default colors by specifying new values inside a scale.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_smooth(method=\"lm\")+\n  scale_color_manual(values=c(\"red\",\"blue\",\"green\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo specify manual colors, you could specify by their names or their hexadecimal codes. For example, you can choose the colors based on names from an online source like in this cheatsheet or you can use the hexadecimal code and choose it from a source like here. I personally prefer the hexa based options for manual colors.\n\n\n\n\n5.2.4 Continuous colors\nWe can also map the colors to a continuous variable. This creates a color bar legend item.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nHere, you can also choose different palettes for choosing the right continuous palette. There are some common packages of palettes that are used very often. RColorBrewer and wesanderson, if you are a fan of his choice of colors. 😉\n\n\n\nlibrary(wesanderson)\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\") +\n  scale_color_gradientn(colours = wes_palette(\"Moonrise3\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also use simple R base color palettes like rainbow() or terrain.colors(). Use ? and look at these functions to see, how to use them."
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#aesthetics",
    "href": "topics/ggplot/lab_gg1.html#aesthetics",
    "title": "Basics in ggplot",
    "section": "5.3 Aesthetics",
    "text": "5.3 Aesthetics\n\n5.3.1 Aesthetic parameter\nWe can change the size of all points by a fixed amount by specifying size outside the aesthetic parameter.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species),size=3)+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n5.3.2 Aesthetic mapping\nWe can map another variable as size of the points. This is done by specifying size inside the aesthetic mapping. Now the size of the points denote Sepal.Width. A new legend group is created to show this new aesthetic.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  geom_smooth(method=\"lm\")"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#density",
    "href": "topics/ggplot/lab_gg1.html#density",
    "title": "Basics in ggplot",
    "section": "6.1 Density",
    "text": "6.1 Density\nLet’s look at the sample plot in density.\n\nggplot(data=iris,mapping=aes(x=Sepal.Length))+\n  geom_density()\n\n\n\n\n\n\n\n\nThe above plot is not very informative, let’s see how the different species contribute:\n\nggplot(data=iris,mapping=aes(x=Sepal.Length))+\n  geom_density(aes(fill = Species), alpha = 0.8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe alpha option inside geom_density controls the transparency of the plot."
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#with-wrap",
    "href": "topics/ggplot/lab_gg1.html#with-wrap",
    "title": "Basics in ggplot",
    "section": "8.1 With wrap",
    "text": "8.1 With wrap\nWe can create subplots using the faceting functionality.\n\nplot &lt;- ggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\") + \n  facet_wrap(~Species)\nplot\n\n\n\n\n\n\n\n\nIf we try the same with the gene counts data faceted by time.\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1), color = Time)) +\n  facet_wrap(~Time)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#with-grid",
    "href": "topics/ggplot/lab_gg1.html#with-grid",
    "title": "Basics in ggplot",
    "section": "8.2 With grid",
    "text": "8.2 With grid\nHere in the above plot, you see some empty samples in each facet. In this case, you could use facet_grid together with space and scales options to make it look neat and intuitive. You can use ?facet_grid and ?facet_wrap to figure out the exact difference between the two.\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1), color = Time)) +\n  facet_grid(~Time , scales = \"free\", space = \"free\")\n\n\n\n\n\n\n\n\nYou can also make grid with different variables one might have using vars() function together with rows and cols options!\n\nggplot(data = gc_long) +\n  geom_boxplot(mapping = aes(x = Sample_Name, y = log10(count + 1), color = Time)) +\n  facet_grid(rows = vars(Time), cols = vars(Replicate), scales = \"free\", space = \"free\")"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#labels",
    "href": "topics/ggplot/lab_gg1.html#labels",
    "title": "Basics in ggplot",
    "section": "9.1 Labels",
    "text": "9.1 Labels\nHere, we will quickly mention, how one can add labels to the plots. Items on the plot can be labelled using the geom_text or geom_label geoms.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_text(aes(label=Species,hjust=0),nudge_x=0.5,size=3)\n\n\n\n\n\n\n\n\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_label(aes(label=Species,hjust=0),nudge_x=0.5,size=3)\n\n\n\n\n\n\n\n\nThe R package ggrepel allows for non-overlapping labels.\n\nlibrary(ggrepel)\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_text_repel(aes(label=Species),size=3)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#annotations",
    "href": "topics/ggplot/lab_gg1.html#annotations",
    "title": "Basics in ggplot",
    "section": "9.2 Annotations",
    "text": "9.2 Annotations\nCustom annotations of any geom can be added arbitrarily anywhere on the plot.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  annotate(\"text\",x=2.5,y=2.1,label=\"There is a random line here\")+\n  annotate(\"segment\",x=2,xend=4,y=1.5,yend=2)"
  },
  {
    "objectID": "topics/ggplot/lab_gg1.html#flip-coordinates",
    "href": "topics/ggplot/lab_gg1.html#flip-coordinates",
    "title": "Basics in ggplot",
    "section": "10.1 Flip coordinates",
    "text": "10.1 Flip coordinates\nOne can also easily just flip the x and y axis.\n\ngc_long %&gt;% \n  group_by(Time) %&gt;% \n  summarise(mean=mean(log10(count +1)),se=se(log10(count +1))) %&gt;%\n  ggplot(aes(x=Time, y=mean)) + \n  geom_col() +\n  coord_flip()"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#contents",
    "href": "topics/ggplot/slide_gg2.html#contents",
    "title": "Advanced ggplot",
    "section": "Contents",
    "text": "Contents\n\nAxis\nStats\nTheme\nLegends\nCombining-plots\nSaving plots\nExtensions\nHelp"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#axis",
    "href": "topics/ggplot/slide_gg2.html#axis",
    "title": "Advanced ggplot",
    "section": "Axis",
    "text": "Axis\n\nscales: x, y\nsyntax: scale_&lt;axis&gt;_&lt;type&gt;\narguments: name, limits, breaks, labels"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#axis-scales",
    "href": "topics/ggplot/slide_gg2.html#axis-scales",
    "title": "Advanced ggplot",
    "section": "Axis • Scales",
    "text": "Axis • Scales\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#coordinate-systems",
    "href": "topics/ggplot/slide_gg2.html#coordinate-systems",
    "title": "Advanced ggplot",
    "section": "Coordinate Systems",
    "text": "Coordinate Systems\n\n\n\n\n\n\ncoord_cartesian(xlim=c(2,8)) for zooming in\ncoord_map for controlling limits on maps\ncoord_polar"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#coordinate-systems-1",
    "href": "topics/ggplot/slide_gg2.html#coordinate-systems-1",
    "title": "Advanced ggplot",
    "section": "Coordinate Systems",
    "text": "Coordinate Systems\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#stats",
    "href": "topics/ggplot/slide_gg2.html#stats",
    "title": "Advanced ggplot",
    "section": "Stats",
    "text": "Stats\n\nStats compute new variables from input data.\n\n\n\nGeoms have default stats.\n\n\nx &lt;- ggplot(penguins) + geom_bar(aes(x=flipper_length_mm),stat=\"bin\")\ny &lt;- ggplot(penguins) + geom_bar(aes(x=species),stat=\"count\")\nz &lt;- ggplot(penguins) + geom_bar(aes(x=species,y=flipper_length_mm),stat=\"identity\")\nwrap_plots(x,y,z,nrow=1)"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#stats-1",
    "href": "topics/ggplot/slide_gg2.html#stats-1",
    "title": "Advanced ggplot",
    "section": "Stats",
    "text": "Stats\n\nPlots can be built with stats.\n\n\nx &lt;- ggplot(penguins) + stat_bin(aes(x=flipper_length_mm),geom=\"bar\")\ny &lt;- ggplot(penguins) + stat_count(aes(x=species),geom=\"bar\")\nz &lt;- ggplot(penguins) + stat_identity(aes(x=species,y=flipper_length_mm),geom=\"bar\")\nwrap_plots(x,y,z,nrow=1)\n\n\n\n\nNormally the data is plotted directly from input as it is.\nSome plots require the data to be computed or transformed. Eg. boxplot, histograms, smoothing, predictions, regression etc."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#stats-2",
    "href": "topics/ggplot/slide_gg2.html#stats-2",
    "title": "Advanced ggplot",
    "section": "Stats",
    "text": "Stats\n\nStats have default geoms.\n\n\n\n\n\n\n\nplot\nstat\ngeom\n\n\n\n\nhistogram\nbin\nbar\n\n\nsmooth\nsmooth\nline\n\n\nboxplot\nboxplot\nboxplot\n\n\ndensity\ndensity\nline\n\n\nfreqpoly\nfreqpoly\nline\n\n\n\n\n\n\n\n\nUse args(geom_bar) to check arguments."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#stats-3",
    "href": "topics/ggplot/slide_gg2.html#stats-3",
    "title": "Advanced ggplot",
    "section": "Stats",
    "text": "Stats\n\nstat_compare_means() from the package ggpubr.\n\n\n\nggplot(penguins, aes(x=species,y=flipper_length_mm, fill=species)) + \n  geom_boxplot() + \n  ggpubr::stat_compare_means()"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#stats-4",
    "href": "topics/ggplot/slide_gg2.html#stats-4",
    "title": "Advanced ggplot",
    "section": "Stats",
    "text": "Stats\n\nstat_compare_means() from the package ggpubr.\n\n\n\nmy_comparisons &lt;- list( c(\"Adelie\", \"Chinstrap\"), c(\"Chinstrap\", \"Gentoo\"), c(\"Adelie\", \"Gentoo\") )\nggplot(penguins, aes(x=species,y=flipper_length_mm, fill=species)) + \n  geom_boxplot() + \n  ggpubr::stat_compare_means(comparisons = my_comparisons, method = \"t.test\")"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#theme",
    "href": "topics/ggplot/slide_gg2.html#theme",
    "title": "Advanced ggplot",
    "section": "Theme",
    "text": "Theme\n\nModify non-data plot elements/appearance\nAxis labels, panel colors, legend appearance etc\nSave a particular appearance for reuse\n?theme"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#theme-1",
    "href": "topics/ggplot/slide_gg2.html#theme-1",
    "title": "Advanced ggplot",
    "section": "Theme",
    "text": "Theme\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#theme-text",
    "href": "topics/ggplot/slide_gg2.html#theme-text",
    "title": "Advanced ggplot",
    "section": "Theme • Text",
    "text": "Theme • Text\n\n\nelement_text(family=NULL,face=NULL,color=NULL,size=NULL,hjust=NULL,\n             vjust=NULL, angle=NULL,lineheight=NULL,margin = NULL)\n\n\n\n\n\np &lt;- p + theme(\n    axis.title=element_text(color=\"#e41a1c\"),\n    axis.text=element_text(color=\"#377eb8\"),\n    plot.title=element_text(color=\"#4daf4a\"),\n    plot.subtitle=element_text(color=\"#984ea3\"),\n    legend.text=element_text(color=\"#ff7f00\"),\n    legend.title=element_text(color=\"#ffff33\"),\n    strip.text=element_text(color=\"#a65628\")\n)"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#theme-rect",
    "href": "topics/ggplot/slide_gg2.html#theme-rect",
    "title": "Advanced ggplot",
    "section": "Theme • Rect",
    "text": "Theme • Rect\n\n\nelement_rect(fill=NULL,color=NULL,size=NULL,linetype=NULL)\n\n\n\n\n\np &lt;- p + theme(\n    plot.background=element_rect(fill=\"#b3e2cd\"),\n    panel.background=element_rect(fill=\"#fdcdac\"),\n    panel.border=element_rect(fill=NA,color=\"#cbd5e8\",size=3),\n    legend.background=element_rect(fill=\"#f4cae4\"),\n    legend.box.background=element_rect(fill=\"#e6f5c9\"),\n    strip.background=element_rect(fill=\"#fff2ae\")\n)"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#theme-reuse",
    "href": "topics/ggplot/slide_gg2.html#theme-reuse",
    "title": "Advanced ggplot",
    "section": "Theme • Reuse",
    "text": "Theme • Reuse\n\n\nnewtheme &lt;- theme_bw() + theme(\n  axis.ticks=element_blank(),\n  panel.background=element_rect(fill=\"white\"),\n  panel.grid.minor=element_blank(),\n  panel.grid.major.x=element_blank(),\n  panel.grid.major.y=element_line(size=0.3,color=\"grey90\"),\n  panel.border=element_blank(),\n  legend.position=\"top\",\n  legend.justification=\"right\"\n)\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\np + newtheme"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#legend-theme",
    "href": "topics/ggplot/slide_gg2.html#legend-theme",
    "title": "Advanced ggplot",
    "section": "Legend • Theme",
    "text": "Legend • Theme\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#legend-geom",
    "href": "topics/ggplot/slide_gg2.html#legend-geom",
    "title": "Advanced ggplot",
    "section": "Legend • Geom",
    "text": "Legend • Geom\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#combining-plots",
    "href": "topics/ggplot/slide_gg2.html#combining-plots",
    "title": "Advanced ggplot",
    "section": "Combining Plots",
    "text": "Combining Plots\n\np &lt;- ggplot(penguins,aes(x=species,y=bill_length_mm,color=island))+geom_point()\nq &lt;- ggplot(penguins,aes(x=species,y=body_mass_g,fill=island))+geom_bar(stat=\"identity\")\npatchwork::wrap_plots(p,q)\n\n\nRefer to patchwork documentation. Some notable alternatives are ggpubr and cowplot.\n\nCombining two or more ggplot2 plots is often required and several packages exist to help with this situation. Some functions allow plots to be placed adjacently, also allowing varying heights or widths of each plot. Some functions allow one plot to be plotted on another plot like a subset plot. Here are alternative options.\n\ngridExtra::grid.arrange(p,q,ncol=2)\nggpubr::ggarrange(p,q,ncol=2,widths=c(1.5,1),common.legend=T)\ncowplot::plot_grid()"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#saving-plots",
    "href": "topics/ggplot/slide_gg2.html#saving-plots",
    "title": "Advanced ggplot",
    "section": "Saving plots",
    "text": "Saving plots\n\np &lt;- ggplot(iris,aes(Petal.Length,Sepal.Length,color=Species))+\n  geom_point()\n\n\nggplot2 plots can be saved just like base plots\n\n\npng(\"plot.png\",height=5,width=7,units=\"cm\",res=200)\nprint(p)\ndev.off()\n\n\nggplot2 package offers a convenient function\n\n\nggsave(\"plot.png\",p,height=5,width=7,units=\"cm\",dpi=200,type=\"cairo\")\n\n\nNote that default units in png is pixels while in ggsave it’s inches"
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#extensions",
    "href": "topics/ggplot/slide_gg2.html#extensions",
    "title": "Advanced ggplot",
    "section": "Extensions",
    "text": "Extensions\n\nggrepel: Text labels including overlap control\nggforce: Circles, splines, hulls, voronoi etc\nggpmisc: Miscellaneaous features\nggthemes: Set of extra themes\n\nggthemr: More themes\n\nggsci: Color palettes for scales\n\nggmap: Dedicated to mapping\n\nggraph: Network graphs\n\nggiraph: Converting ggplot2 to interactive graphics\n\nA collection of ggplot extension packages: https://exts.ggplot2.tidyverse.org/.\nCurated list of ggplot2 links: https://github.com/erikgahner/awesome-ggplot2."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#learning-help",
    "href": "topics/ggplot/slide_gg2.html#learning-help",
    "title": "Advanced ggplot",
    "section": "Learning & Help",
    "text": "Learning & Help\n\n\n\nggplot2 book\n\n\nThe R cookbook\n\n\n\n\nggplot2 official reference\n\nRStudio cheatsheet\n\nr-statistics ggplot2 cheatsheet\n\nStackOverflow\n\nBlogs, R-Bloggers, Cedric Scherer etc."
  },
  {
    "objectID": "topics/ggplot/slide_gg2.html#section",
    "href": "topics/ggplot/slide_gg2.html#section",
    "title": "Advanced ggplot",
    "section": "",
    "text": "Thank you. Questions?"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#contents",
    "href": "topics/Shiny/slide_shiny3.html#contents",
    "title": "R Shiny - Part III",
    "section": "Contents",
    "text": "Contents\n\nModules\nDebugging\nThemes\nDeployment\nInteractive documents"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#modules",
    "href": "topics/Shiny/slide_shiny3.html#modules",
    "title": "R Shiny - Part III",
    "section": "Modules",
    "text": "Modules\n\nParts of an app can be modularized and reused like mini apps\nThey can be used where needed like functions\nModules have their own namespace\nA module has a UI part and a server part\nDefine namespace using NS()\nModules can be nested"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#modules-1",
    "href": "topics/Shiny/slide_shiny3.html#modules-1",
    "title": "R Shiny - Part III",
    "section": "Modules",
    "text": "Modules\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\ncounter_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  div(\n    actionButton(ns(\"btn\"), label = \"Counter\"),\n    textOutput(ns(\"txt\"))\n  )\n}\n\ncounter_server &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    count &lt;- reactiveVal(0)\n    output$txt &lt;- renderText({\n      count(count() + 1)\n      paste0(\"Counter \", id, \":\", count())\n    }) |&gt; bindEvent(input$btn)\n  })\n}\n\nshinyApp(\n  ui = fluidPage(\n    counter_ui(id = \"1\"),\n    counter_ui(id = \"2\")\n  ),\n\n  server = function(input, output, session) {\n    counter_server(\"1\")\n    counter_server(\"2\")\n  }\n)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#debugging-optimizing",
    "href": "topics/Shiny/slide_shiny3.html#debugging-optimizing",
    "title": "R Shiny - Part III",
    "section": "Debugging & Optimizing",
    "text": "Debugging & Optimizing\n\n\nprint() statements\nInterrupt execution and inspect environment browser()\nVisualize relationships using reactlog"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#debugging-optimizing-1",
    "href": "topics/Shiny/slide_shiny3.html#debugging-optimizing-1",
    "title": "R Shiny - Part III",
    "section": "Debugging & Optimizing",
    "text": "Debugging & Optimizing\n\nAssess compute and RAM usage using profvis\n\nSimple profiling using shiny.tictoc"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#code-execution",
    "href": "topics/Shiny/slide_shiny3.html#code-execution",
    "title": "R Shiny - Part III",
    "section": "Code execution",
    "text": "Code execution\nApp launch\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}\n\n\nNew user\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}\n\n\n\nWidget update\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#theming",
    "href": "topics/Shiny/slide_shiny3.html#theming",
    "title": "R Shiny - Part III",
    "section": "Theming",
    "text": "Theming\n\n\n\nUse shinythemes\n\n\nlibrary(shinythemes)\nfluidPage(theme = shinytheme(\"cerulean\"))\n\n\nLive theme selector\n\n\nlibrary(shinythemes)\nfluidPage(theme = shinythemes::themeSelector())\n\nshinythemes\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 650\nwebr::install(\"shinythemes\")\n\nshinyApp(\n  ui = fluidPage(\n    shinythemes::themeSelector(),\n    sidebarPanel(\n      textInput(\"txt\", \"Text input:\", \"text here\"),\n      sliderInput(\"slider\", \"Slider input:\", 1, 100, 30),\n      actionButton(\"action\", \"Button\"),\n      actionButton(\"action2\", \"Button2\", class = \"btn-primary\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Tab 1\"),\n        tabPanel(\"Tab 2\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#theming-1",
    "href": "topics/Shiny/slide_shiny3.html#theming-1",
    "title": "R Shiny - Part III",
    "section": "Theming",
    "text": "Theming\n\nUse bslib\n\n\nlibrary(bslib)\nui &lt;- page_fluid(\n  theme = bs_theme(version = 5)\n)\n\n\n\nLive theme selector\n\n\nlibrary(bslib)\nbs_theme_preview()\n\nbslib, Bootswatch"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#theming-using-custom-css",
    "href": "topics/Shiny/slide_shiny3.html#theming-using-custom-css",
    "title": "R Shiny - Part III",
    "section": "Theming using custom CSS",
    "text": "Theming using custom CSS\n\nInsert in the head\n\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\"))\n  ))\n\n\n\nAdd styles directly\n\n\nui &lt;- fluidPage(h2(\"Old Faithful Geyser Data\", style = \"font-size: 2em;\"))\n\n\n\n\nLoad custom CSS file placed in www/\n\n\nui &lt;- fluidPage(\n  tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\"))\n)\n\nCSS styling"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#deployment",
    "href": "topics/Shiny/slide_shiny3.html#deployment",
    "title": "R Shiny - Part III",
    "section": "Deployment",
    "text": "Deployment\n\nR scripts\n\nGitHub\nR Package\n\n\n\n\nContainer (Docker …)\n\n\n\n\nHosting\n\nShinyapps.io\nShiny Server (Free)\nShiny Server Pro\n\n\n\n\n\nAutomatically deploying to shinyapps.io"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#shinyapps.io",
    "href": "topics/Shiny/slide_shiny3.html#shinyapps.io",
    "title": "R Shiny - Part III",
    "section": "Shinyapps.io",
    "text": "Shinyapps.io\n\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name=\"username\", token=\"HDFGT46YF7TDT6474G47\", secret=\"hdgTDF5FStgdkpJ\")\ndeployApp(appName=\"name\")\n\n\nShiny apps user guide, Shiny server guide"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#interactive-documents-quarto",
    "href": "topics/Shiny/slide_shiny3.html#interactive-documents-quarto",
    "title": "R Shiny - Part III",
    "section": "Interactive documents • Quarto",
    "text": "Interactive documents • Quarto\n---\ntitle: \"Interactive scatterplot\"\nformat: html\nserver: shiny\n---\n\n```{r}\nlibrary(shiny)\nlibrary(ggplot2)\n\nselectInput(\"x_var\", \"X-axis Variable:\", choices=names(mtcars), selected = \"hp\"),\nselectInput(\"y_var\", \"Y-axis Variable:\", choices=names(mtcars), selected = \"mpg\"),\nplotOutput(\"plot\")\n```\n\n```{r}\n#| context: server\noutput$plot &lt;- renderPlot({\n  ggplot(mtcars, aes_string(x = input$x_var, y = input$y_var)) +\n    geom_point() +\n    labs(title = \"Interactive mtcars scatterplot\", \n         x = input$x_var, \n         y = input$y_var)\n})\n```"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#interactive-documents-rmarkdown",
    "href": "topics/Shiny/slide_shiny3.html#interactive-documents-rmarkdown",
    "title": "R Shiny - Part III",
    "section": "Interactive documents • Rmarkdown",
    "text": "Interactive documents • Rmarkdown\n\nShiny can run in RMarkdown documents. Set YAML runtime: shiny.\n\n---\ntitle: Interactive document\noutput: html_document\nruntime: shiny\n---\n\nShiny widgets can be included directly\n\n```{r}\nselectInput('n_breaks',label='Number of bins:',choices=c(10,20,35,50),selected=20)\n```"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#interactive-documents",
    "href": "topics/Shiny/slide_shiny3.html#interactive-documents",
    "title": "R Shiny - Part III",
    "section": "Interactive documents",
    "text": "Interactive documents\n\nWhole shiny apps can be included directly\n\n```{r}\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n```\n\n\nHosted shiny apps can be embedded using &lt;iframe&gt;\n\n&lt;iframe src=\"https://user.shinyapps.io/app\"&gt;&lt;/iframe&gt;"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#other-topics",
    "href": "topics/Shiny/slide_shiny3.html#other-topics",
    "title": "R Shiny - Part III",
    "section": "Other topics",
    "text": "Other topics\n\nExtended task\nShiny unit tests\nApplications of action buttons\n\nProgress indicators\n\nShinylive\nShinyUIEditor\n…"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#extensions",
    "href": "topics/Shiny/slide_shiny3.html#extensions",
    "title": "R Shiny - Part III",
    "section": "Extensions",
    "text": "Extensions\n\nNaxstats: Repo collection of shiny extensions\nbslib: Bootswatch themes for shiny\nshinyurl: using URLs to recreate state of an app\nshinypod: Reusable modules\nshinyjs: Custom javascript functionality\nshinyWidgets: Bootstrap 3 custom widgets\nshinyBS: Bootstrap 3 widgets\nshinymanager: Authentication for shiny apps\n…"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#learning-community",
    "href": "topics/Shiny/slide_shiny3.html#learning-community",
    "title": "R Shiny - Part III",
    "section": "Learning & community",
    "text": "Learning & community\n\n\nDocumentation\n\nPosit Shiny home\nPosit Shiny articles\n\nBooks\n \n\nMastering Shiny Book\nEngineering Shiny Apps\nShiny Interfaces\nMastering shiny solutions\n\n\nConferences\n\nAppsilon: ShinyConf\nJumping Rivers: Shiny in Production\n\nBlogs & Podcasts\n\nPosit Shiny Blog\nShiny Developer Series"
  },
  {
    "objectID": "topics/Shiny/slide_shiny3.html#section",
    "href": "topics/Shiny/slide_shiny3.html#section",
    "title": "R Shiny - Part III",
    "section": "",
    "text": "Thank you. Questions?\nSlide inspirations: Roy Francis (NBIS, RaukR2024)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#contents",
    "href": "topics/Shiny/slide_shiny1.html#contents",
    "title": "Introduction to R Shiny",
    "section": "Contents",
    "text": "Contents\n\nIntroduction to RShiny\nCode Structure\nApp execution\nUI\n\nDynamic UI\n\nServer"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#section",
    "href": "topics/Shiny/slide_shiny1.html#section",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "K-means sidebar, simple\n\n\n\n\n\n\n\nMovie explorer sidebar, simple\n\n\n\n\n\n\n\nfreeR simple\n\n\n\n\n\n\n\nSuperZip intermediate, geo\n\n\n\n\n\n\n\nWorkout creator intermediate\n\n\n\n\n\n\n\nWildLift intermediate, dashboard\n\n\n\n\n\n\n\nCovid tracker intermediate\n\n\n\n\n\n\n\nCashflow calc intermediate\n\n\n\n\n\n\n\nGenome browser intermediate\n\n\n\n\n\n\n\nSpecies selection adv\n\n\n\n\n\n\n\nProtein structure adv, dashboard\n\n\n\n\n\n\n\nCommute explorer adv, geo\n\n\n\n\n\n\n\nSteam explorer adv, dashboard\n\n\n\n\n\n\n\nSystem pipe adv, dashboard\n\n\n\n\n\n\n\nShark attack adv"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#what-is-shiny",
    "href": "topics/Shiny/slide_shiny1.html#what-is-shiny",
    "title": "Introduction to R Shiny",
    "section": "What is shiny?",
    "text": "What is shiny?\n\n\nInteractive documents & web applications\nCompletely created using R or Python\nNeeds a live environment\nshiny.posit.co/r/gallery/\nshinyapps.org\n\n\n\n\nUsage\n\nStandalone web applications\nDashboard/Flexboard\nInteractive RMarkdown\nVScode extensions\n\n\n\n\nApp structure\n\nUI Layout\nUI Inputs (Widgets)\nUI Outputs\nRenderer\nBuilder"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#app-organization",
    "href": "topics/Shiny/slide_shiny1.html#app-organization",
    "title": "Introduction to R Shiny",
    "section": "App organization",
    "text": "App organization\nOne file format\n\n\n\napp.r\n\nui &lt;- fluidPage()\nserver &lt;- function(input,output) {}\nshinyApp(ui=ui,server=server)\n\n\n\nTwo file format\n\n\n\nui.r\n\nui &lt;- fluidPage()\n\n\n\n\n\nserver.r\n\nserver &lt;- function(input,output) {}"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#app-execution",
    "href": "topics/Shiny/slide_shiny1.html#app-execution",
    "title": "Introduction to R Shiny",
    "section": "App execution",
    "text": "App execution\n\nRun shiny::runApp(\"path/to/folder\")\n\n\n\nUse shinyApp()\n\n\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n\n\n\n\nRunning as a separate process from terminal\n\nR -e \"shiny::runApp('~/shinyapp')\"\n\n\n\nFrom Rmd file using rmarkdown::run()"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#section-1",
    "href": "topics/Shiny/slide_shiny1.html#section-1",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "User Interface (UI)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui",
    "href": "topics/Shiny/slide_shiny1.html#ui",
    "title": "Introduction to R Shiny",
    "section": "UI",
    "text": "UI\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(\n      \"hello\"\n    )\n  )\n),\nserver=function(input,output) {})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#language-of-the-web-html-css-javascript",
    "href": "topics/Shiny/slide_shiny1.html#language-of-the-web-html-css-javascript",
    "title": "Introduction to R Shiny",
    "section": "Language of the web: HTML, CSS & Javascript",
    "text": "Language of the web: HTML, CSS & Javascript\n\n\nHypertext Markup Language (HTML)\n\nAll UI code is translated to HTML\nInspect with browser\n\n\nsidebarPanel(helpText(\"Sidebar Panel\"))\n\n&lt;div class=\"col-sm-4\"&gt;\n  &lt;form class=\"well\" role=\"complementary\"&gt;\n    &lt;span class=\"help-block\"&gt;Sidebar Panel&lt;/span&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\nCascading style sheet (CSS)\n\nShiny is built on Bootstrap 3"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#section-2",
    "href": "topics/Shiny/slide_shiny1.html#section-2",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(sidebarPanel(helpText(\"Sidebar Panel\")),\n    mainPanel(tabsetPanel(\n                tabPanel(\"tab1\",\n                         fluidRow(\n                           column(6,helpText(\"Col1\")),\n                           column(6,\n                                  helpText(\"Col2\"),\n                                  fluidRow(\n                                    column(4,style=\"background-color:#b0c6fb\",helpText(\"Col1\")),\n                                    column(4,style=\"background-color:#ffa153\",helpText(\"Col2\")),\n                                    column(4,style=\"background-color:#b1f6c6\",helpText(\"Col3\"))\n                                  )\n                           )\n                         )\n                ),\n                tabPanel(\"tab2\",\n                         inputPanel(helpText(\"Input Panel\"))\n                ),\n                tabPanel(\"tab3\",\n                  wellPanel(helpText(\"Well Panel\"))\n                )\n              )\n    )\n  )\n),\nserver=function(input,output) {})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-input",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-input",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Input",
    "text": "UI • Widgets • Input\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           selectInput(\"select-input\",\n                       label=\"selectInput\",\n                       choices=c(\"A\",\"B\",\"C\")),\n    )\n  )\n),\nserver=function(input,output) {\n})\n\n\n?selectInput\nselectInput(inputId, label, choices, selected = NULL, multiple = FALSE, \n            selectize = TRUE, width = NULL, size = NULL\n)\n\n\nInput ID has to be unique"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-input-1",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-input-1",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Input",
    "text": "UI • Widgets • Input\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output) {\n})\n\n\nWidgets gallery\n\nWidgets are visual objects on a page to allow for data input. Input and output variables."
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-input-functions",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-input-functions",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Input Functions",
    "text": "UI • Widgets • Input Functions\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ncheckboxInput()\nCheckbox\n\n\ncheckboxGroupInput()\nCheckbox group\n\n\nradioButtons()\nRadio buttons\n\n\ndateInput()\nSingle date\n\n\ndateRangeInput()\nDate range\n\n\nfileInput()\nUpload file\n\n\nnumericInput()\nInput number\n\n\nsliderInput()\nInput number\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ntextInput()\nSingle line text input\n\n\ntextAreaInput()\nMulti-line text input\n\n\npasswordInput()\nPassword input\n\n\nselectInput()\nDropdown selection\n\n\nactionButton()\nAction button\n\n\nsubmitButton()\nSubmit button\n\n\ntabsetPanel()\nTabset panel\n\n\nnavbarPage()\nPage with navbar\n\n\n\n\nWidgets gallery"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-outputs",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-outputs",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Outputs",
    "text": "UI • Widgets • Outputs\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n           textInput(\"text_input\",label=\"textInput\",value=\"hello world\"),\n           textOutput(\"text_output\")\n    ),\nserver=function(input, output) {\n  output$text_output &lt;- renderText({input$text_input})\n})\n\n\n?textOutput\ntextOutput(outputId)\n\n\nOutput ID has to be unique"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-outputs-1",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-outputs-1",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Outputs",
    "text": "UI • Widgets • Outputs\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(fluidRow(column(5,\n           textInput(\"text_input\",label=\"textInput\",value=\"&lt;h3 style='color:red'&gt;Red text&lt;/h3&gt;\"),\n           hr(),\n           htmlOutput(\"html_output\"),\n           textOutput(\"text_output\"),\n           verbatimTextOutput(\"verbatim_text_output\"),\n           tableOutput(\"table_output\"),\n           plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n    ))),\n\nserver=function(input, output) {\n  output$html_output &lt;- renderText({input$text_input})\n  output$text_output &lt;- renderText({input$text_input})\n  output$verbatim_text_output &lt;- renderText({input$text_input})\n  output$table_output &lt;- renderTable({iris[1:3,1:3]})\n  output$plot_output &lt;- renderPlot({\n    plot(iris[,1],iris[,2])\n  })\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#ui-widgets-output-functions",
    "href": "topics/Shiny/slide_shiny1.html#ui-widgets-output-functions",
    "title": "Introduction to R Shiny",
    "section": "UI • Widgets • Output Functions",
    "text": "UI • Widgets • Output Functions\n\n\n\nOutput\nRenderer\nDescription\n\n\n\n\ntextOutput()\nrenderText()/renderPrint()\nStandard text\n\n\nverbatimTextOutput()\nrenderText()/renderPrint()\nMonospaced text\n\n\nhtmlOutput()\nrenderText()/renderPrint()\nHTML text output\n\n\nplotOutput()\nrenderPlot()\nCreate and display image\n\n\nimageOutput()\nrenderImage()\nDisplay existing image\n\n\ntableOutput()\nrenderTable()\nTable output\n\n\nuiOutput()\nrenderUI()\nHTML components"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#a-complete-app",
    "href": "topics/Shiny/slide_shiny1.html#a-complete-app",
    "title": "Introduction to R Shiny",
    "section": "A complete app",
    "text": "A complete app\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n  output$fahrenheit &lt;- renderText({\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  })\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#dynamic-ui",
    "href": "topics/Shiny/slide_shiny1.html#dynamic-ui",
    "title": "Introduction to R Shiny",
    "section": "Dynamic UI",
    "text": "Dynamic UI\n\nUI elements are created conditionally using uiOutput()/renderUI()\n\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\",label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui &lt;- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\",\"Enter text\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output &lt;- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})\n\n\n\n\nOther options include conditionalPanel(), insertUI() and removeUI()"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#rendering-ui",
    "href": "topics/Shiny/slide_shiny1.html#rendering-ui",
    "title": "Introduction to R Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\", label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui &lt;- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\", \"Enter text\", value=\"hello\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output &lt;- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#rendering-ui-1",
    "href": "topics/Shiny/slide_shiny1.html#rendering-ui-1",
    "title": "Introduction to R Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table\"),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  \n  data &lt;- reactive({ get(input$data, 'package:datasets') })\n  \n output$ui &lt;- renderUI({\n  if(input$data==\"iris\") plotOutput(\"plot\",width=\"400px\")\n  })\n  \n  output$plot &lt;- renderPlot({hist(data()[, 1])})\n  output$table &lt;- renderTable({head(data())})\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#rendering-ui-2",
    "href": "topics/Shiny/slide_shiny1.html#rendering-ui-2",
    "title": "Introduction to R Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  sliderInput(\"persons\",label=\"Select number of persons\", value=1, min=1,max=4),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  output$ui &lt;- renderUI({\n    lapply(1:input$persons, function(i) {\n         div(\n           textInput(paste0(\"name\",i),\"Enter name:\",paste0(\"Person \",i)),\n           textInput(paste0(\"tel\",i),\"Enter phone number:\",value = \"0773921562\"),\n           hr()\n         )\n    })\n  })\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#server",
    "href": "topics/Shiny/slide_shiny1.html#server",
    "title": "Introduction to R Shiny",
    "section": "Server",
    "text": "Server\n\nServer is a function that assembles your input into output using R based code.\nThree rules to be followed to write a server function:\n\n\nRule 1: Save objects to display to output$"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#server-1",
    "href": "topics/Shiny/slide_shiny1.html#server-1",
    "title": "Introduction to R Shiny",
    "section": "Server",
    "text": "Server\nRule 2: Build objects to display with render*()\n\nR-Code block (can even be an entire R script) between the braces {} inside the render*() function.\n\n\n\n  output$hist &lt;- renderPlot({\n                    tile &lt;- \"histogram of 100 random numbers\"\n                    hist(rnorm(100), main = title)\n                })\n\n\n\n\nDifferent Render functions"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#server-2",
    "href": "topics/Shiny/slide_shiny1.html#server-2",
    "title": "Introduction to R Shiny",
    "section": "Server",
    "text": "Server\nRule 3: Use input values with input$"
  },
  {
    "objectID": "topics/Shiny/slide_shiny1.html#section-3",
    "href": "topics/Shiny/slide_shiny1.html#section-3",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "Thank you. Questions?\nSlide inspirations: Roy Francis (NBIS, RaukR2024)"
  },
  {
    "objectID": "home_schedule.html",
    "href": "home_schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nBreaks are planned for approximately at 10:15 and 15:00 every day.\n\n\n\n\n\n\n\n\nTime\nTopic\nInstructor\n\n\n \n13-May-2025TueRoom E24, Building 404, Medicon Village\n\n09:00 - 09:15\nWelcome\nMarkus Ringner\n\n\n09:15 - 10:15\nggplot basics\nLokesh Mano\n\n\n10:15 - 10:30\nBreak\n\n\n\n10:30 - 12:00\nAdvanced ggplot\nLokesh Mano\n\n\n12:00 - 13:00\nLunch\n\n\n\n13:00 - 13:30\nVector and bitmap images\nMarkus Ringner\n\n\n13:30 - 15:00\nPCA plots\nMarkus Ringner\n\n\n15:00 - 15:30\nFika\n\n\n\n15:30 - 16:30\nSingle-cell data visualizations\nLokesh Mano\n\n\n16:30 - 17:00\nWrap-up day I\nLokesh Mano\n \n14-May-2025WedRoom E24, Building 404, Medicon Village\n\n09:00 - 10:15\nIntro to Quarto\nKatja Kozjek\n\n\n10:15 - 10:30\nBreak\n\n\n\n10:30 - 12:00\nAdvanced Quarto\nLokesh Mano\n\n\n12:00 - 13:00\nLunch\n\n\n\n13:00 - 15:00\nIntro to dynamic plotting\nKatja Kozjek\n\n\n13:30 - 15:30\nFika\n\n\n\n15:30 - 16:30\nAdvanced dynamic plotting\nLokesh Mano\n\n\n16:30 - 17:00\nWrap-up day II\nLokesh Mano\n \n14-May-2025WedRestaurang Valvet\n\n18:30 - 22:00\nDinner\n\n \n15-May-2025ThuRoom E24, Building 404, Medicon Village\n\n09:00 - 10:15\nIntro to R-Shiny app\nLokesh Mano\n\n\n10:15 - 10:30\nBreak\n\n\n\n10:30 - 12:00\nR-Shiny apps part-II\nLokesh Mano\n\n\n12:00 - 13:00\nLunch\n\n\n\n13:00 - 15:00\nR-Shiny apps part-III\nLokesh Mano\n\n\n15:00 - 15:30\nFika\n\n\n\n15:30 - 16:30\nOwn shiny app\n\n\n\n16:30 - 16:45\nWrap-up day III\nLokesh Mano\n\n\n16:45 - 17:00\nClosing and feedback sessions\nLokesh Mano\n\n\n\n\n\n\n\n   Date    Venue    Slides    Lab    Video"
  },
  {
    "objectID": "topics/Shiny/lab_shiny2.html",
    "href": "topics/Shiny/lab_shiny2.html",
    "title": "RShiny Lab: Part II",
    "section": "",
    "text": "We will here first look into the example of what the automatic reactivity of Rshiny looks like. The reactive functions like renderPlot() and renderPrint() are always looking for any changes in the input values and are updated quickly! Although this is super handy for any app, sometimes this can lead to unwanted confusion. Like, take the R function rnorm(), this function basically spits out random numbers. If you use this function in an app, everytime this function is called, it will output different random number sets. This can cause problems like in the example below:\n Task   Try to change the slider input values and check if the summary and hist match with each other?\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n    label = \"Choose a number\", \n    value = 25, min = 1, max = 100),\n  plotOutput(\"hist\"),\n  verbatimTextOutput(\"stats\")\n)\n\nserver &lt;- function(input, output) {\n  output$hist &lt;- renderPlot({\n    hist(rnorm(input$num))\n  })\n  output$stats &lt;- renderPrint({\n    summary(rnorm(input$num))\n  })\n}\n\nshinyApp(ui = ui, server = server)\nSo, in order to make it consistent, we have to use the rnorm() only once and save it as a reactive function and then apply it to both the hist() and summary(). We do this by using reactive() function to store it as a variable. See the example below:\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nui &lt;- fluidPage(\n  sliderInput(inputId = \"num\", \n    label = \"Choose a number\", \n    value = 25, min = 1, max = 100),\n  plotOutput(\"hist\"),\n  verbatimTextOutput(\"stats\")\n)\n\nserver &lt;- function(input, output) {\n  \n  data &lt;- reactive({\n    rnorm(input$num)\n  })\n  \n  output$hist &lt;- renderPlot({\n    hist(data())\n  })\n  output$stats &lt;- renderPrint({\n    summary(data())\n  })\n}\n\nshinyApp(ui = ui, server = server)\n Note   As the data variable we have in the example above is a reactive function, you have to remember to use () whenever you call that particular variable."
  },
  {
    "objectID": "topics/Shiny/lab_shiny2.html#rmarkdown",
    "href": "topics/Shiny/lab_shiny2.html#rmarkdown",
    "title": "RShiny Lab: Part II",
    "section": "8.1 Rmarkdown",
    "text": "8.1 Rmarkdown\nShiny interactive widgets can be embedded into Rmarkdown documents. These documents need to be live and can handle interactivity. The important addition is the line runtime: shiny to the YAML matter. Here is an example:\n\n\n---\nruntime: shiny\noutput: html_document\n---\n\n```{r}\nlibrary(shiny)\n```\n\nThis is a standard RMarkdown document. Here is some code:\n\n```{r}\nhead(iris)\n```\n\n```{r}\nplot(iris$Sepal.Length,iris$Petal.Width)\n```\n\nBut, here is an interactive shiny widget.\n\n```{r}\nsliderInput(\"in_breaks\",label=\"Breaks:\",min=5,max=50,value=5,step=5)\n```\n\n```{r}\nrenderPlot({\nhist(iris$Sepal.Length,breaks=input$in_breaks)\n})\n```\n\n\nThis code can be copied to a new file in RStudio and saved as, for example, shiny.Rmd. Then click Knit. Alternatively, you can run rmarkdown::run(\"shiny.Rmd\")."
  },
  {
    "objectID": "topics/Shiny/lab_shiny2.html#quarto",
    "href": "topics/Shiny/lab_shiny2.html#quarto",
    "title": "RShiny Lab: Part II",
    "section": "8.2 Quarto",
    "text": "8.2 Quarto\nSimialrly, you can do the same in quarto. Just change the yaml header of the previous code with the following:\n\n\n---\nformat: html\nserver: shiny\n---\n\n\nAlso under the server part of the code-chunk, add #| context: server\nThis could be saved as shiny.qmd and could be rendered in the bash terminal by quarto render shiny.qmd\nMore information about using shiny and quarto together is here"
  },
  {
    "objectID": "home_info.html",
    "href": "home_info.html",
    "title": "Practical Info",
    "section": "",
    "text": "Lund_mv\n\n\n\n\n\n\n\n\n\n\nRoom E24\nBuilding 404\nMedicon Village\nScheelevägen 2\n223 63 Lund\nSweden\nFor Lund city buses, tram, regional buses and regional trains, use skanetrafiken.se. You can buy a ticket at the central station in Lund or at the regional bus (card only). You can also use the app Skånetrafiken From the Lund C the easiest is to take the tram from Clemens torget towards ESS and get off at Lund Ideontorget. The trip take about 5 minutes and a tram leaves about four times an hour.\n\n\n\n\n\nThe lunches during the course will be provided at Restaurant & Café Inspira located at Medicon Village which is 2 minutes walk from the course location. The location of the restaurant is here.\n\n\n\nThe restaurant for the dinner on the 2nd day will be at Valvet Steakhouse."
  },
  {
    "objectID": "home_info.html#location",
    "href": "home_info.html#location",
    "title": "Practical Info",
    "section": "",
    "text": "Lund_mv\n\n\n\n\n\n\n\n\n\n\nRoom E24\nBuilding 404\nMedicon Village\nScheelevägen 2\n223 63 Lund\nSweden\nFor Lund city buses, tram, regional buses and regional trains, use skanetrafiken.se. You can buy a ticket at the central station in Lund or at the regional bus (card only). You can also use the app Skånetrafiken From the Lund C the easiest is to take the tram from Clemens torget towards ESS and get off at Lund Ideontorget. The trip take about 5 minutes and a tram leaves about four times an hour.\n\n\n\n\n\nThe lunches during the course will be provided at Restaurant & Café Inspira located at Medicon Village which is 2 minutes walk from the course location. The location of the restaurant is here.\n\n\n\nThe restaurant for the dinner on the 2nd day will be at Valvet Steakhouse."
  },
  {
    "objectID": "home_info.html#contact",
    "href": "home_info.html#contact",
    "title": "Practical Info",
    "section": "Contact",
    "text": "Contact\nThis workshop is run by the National Bioinformatics Infrastructure Sweden (NBIS). NBIS is a platform that is part of SciLifeLab.\nIf you would like to get in touch with us regarding this workshop, please contact us.\nIf you would like to get in touch with us regarding the course at GitHub, kindly write to us at the issues page."
  },
  {
    "objectID": "topics/lab_download.html",
    "href": "topics/lab_download.html",
    "title": "Download data",
    "section": "",
    "text": "The following data will be used in the used for the exercises in this course. The data comes from a mock RNA sequencing data with 12 samples that are from cell-lines. As in any normal RNAseq analysis the counts of genes were normalized using different methods such as VST and CPM after filtering out the genes that were of very low expression. We would use these data for visualizations.\nDownload all of these files into your current working directory\nYou can download all the files together here. Make a directory called data and unzip in that directory!\nIf workshop_on_advanced_data_visualization is the current working directory, the directory tree should look like this:\n\nworkshop_on_advanced_data_visualization\n\ndata\n\narch_newick.txt\ncounts_deseq2.txt\ncounts_filtered.txt\ncounts_raw.txt\ncounts_vst.txt\nhuman_biomaRt_annotation.csv\nmetadata.csv\nTime_t24_vs_t0.txt\nTime_t2_vs_t0.txt\nTime_t6_vs_t0.txt\ntree_env.tsv\ntree_hmap.tsv\nshiny_app_data.csv\n\n\n\nYou can find the information related to the important files below:\n\n\n\nTable with gene counts after filtering: Filtered Counts\nTable with gene counts normalized with VST: VST counts\nTable with gene counts normalized with DESeq2: DESeq2 counts\n\n\n\n\n\nMetadata of the samples: Sample Metadata\nMetadata of the genes with their functions: Gene Annotation\n\n\n\n\nBelow are the lists of differentially expressed genes between different time points\n\nTime point 6 vs Time point 0\nTime point 24 vs Time point 0"
  },
  {
    "objectID": "topics/lab_download.html#counts-table",
    "href": "topics/lab_download.html#counts-table",
    "title": "Download data",
    "section": "",
    "text": "Table with gene counts after filtering: Filtered Counts\nTable with gene counts normalized with VST: VST counts\nTable with gene counts normalized with DESeq2: DESeq2 counts"
  },
  {
    "objectID": "topics/lab_download.html#metadata",
    "href": "topics/lab_download.html#metadata",
    "title": "Download data",
    "section": "",
    "text": "Metadata of the samples: Sample Metadata\nMetadata of the genes with their functions: Gene Annotation"
  },
  {
    "objectID": "topics/lab_download.html#de-genes",
    "href": "topics/lab_download.html#de-genes",
    "title": "Download data",
    "section": "",
    "text": "Below are the lists of differentially expressed genes between different time points\n\nTime point 6 vs Time point 0\nTime point 24 vs Time point 0"
  },
  {
    "objectID": "topics/lab_download.html#phylogenetic-trees",
    "href": "topics/lab_download.html#phylogenetic-trees",
    "title": "Download data",
    "section": "2.1 Phylogenetic trees",
    "text": "2.1 Phylogenetic trees\n\n\n\n\n\n\nTip\n\n\n\nIf you are interested in leaning about how to work with phylogeny in ggplot and R. You can follow some tutorial materials here\n\n\nThe data required for the phylogenetic trees are already part of the main data.zip file, as shown in the directory tree before. The files needed for this exercise are described below:\n\nA phylogentic tree based on a group of archaeal genomes in newick format: Archaea tree\nSome metadata info regarding the environments that these archaea could be found: Environment info\nAn expression matrix to show heatmap and phylogenetic tree together: for heatmap"
  },
  {
    "objectID": "topics/lab_download.html#map-data-with-ggmap",
    "href": "topics/lab_download.html#map-data-with-ggmap",
    "title": "Download data",
    "section": "2.2 Map-data with ggmap",
    "text": "2.2 Map-data with ggmap\n\n\n\n\n\n\nTip\n\n\n\nIf you are interested in leaning about how to work with maps in ggplot and R. You can follow some tutorial materials here\n\n\nThe data required for this part of the exercise can be downloaded from here\n\nPopulation statistics of the different countries in 2020\nA small data frame of points from the Sisquoc River\nGPS readings from a personal run"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#quarto",
    "href": "topics/Quarto/slide_quarto1.html#quarto",
    "title": "Introduction to Quarto",
    "section": "Quarto",
    "text": "Quarto\nAn open-source scientific and technical publishing system\n\nQuarto is a command line tool, not an R package\nQuarto combine codes, comments, and other features to tell a story about your data\nQuarto support numerous output formats\nQuarto documents are fully reproducible"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#installation",
    "href": "topics/Quarto/slide_quarto1.html#installation",
    "title": "Introduction to Quarto",
    "section": "Installation",
    "text": "Installation\n\nInstall the latest quarto executable\nR package quarto is a wrapper that runs quarto from R\nIf using RStudio, you need a version v2022.07.1 or newer\nVisual Studio Code along with quarto extension is a great option too"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#quarto-notebook",
    "href": "topics/Quarto/slide_quarto1.html#quarto-notebook",
    "title": "Introduction to Quarto",
    "section": "Quarto notebook",
    "text": "Quarto notebook\nQuarto file – a plain text file that has the extension .qmd\n\n\n---\ntitle: \"Palmer penguins\"\nauthor: \"Katja\"\ndate: today\nformat: \n  html: \n    code-fold: true\n    code-tools: true\n    toc: true\n    number-sections: true\nexecute:\n  warning: false\n---\n\n# Meet the penguins\nThe `palmerpenguins` data contains size measurements for three penguin species \nobserved on three islands in the Palmer Archipelago, Antarctica.\n\n![](./images/lter_penguins.png)\n\nThe three species of penguins have quite distinct \ndistributions of physical dimensions (@fig-penguins).\n\n```{r packages}\n#| label: load packages and data\n#| warning: false\n#| output: false\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\ndata(penguins, package = \"palmerpenguins\")\n```\n\n## Bill dimensions\n```{r bill dimensions}\n#| label: fig-penguins\n#| warning: false\n#| fig-cap: \"Bill dimensions of penguins across three species.\"\n#| fig-width: 10\n#| fig-height: 5\n\npenguins %&gt;%\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 2) + \n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"darkorchid\",\"cyan4\")) + \n  labs(color = \"Species\", shape = \"Species\") + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  theme_bw()\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#quarto-document-anatomy",
    "href": "topics/Quarto/slide_quarto1.html#quarto-document-anatomy",
    "title": "Introduction to Quarto",
    "section": "Quarto document anatomy",
    "text": "Quarto document anatomy"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#yaml-metadata",
    "href": "topics/Quarto/slide_quarto1.html#yaml-metadata",
    "title": "Introduction to Quarto",
    "section": "YAML metadata",
    "text": "YAML metadata\n\n\n---\ntitle: \"Palmer penguins\"\nsubtitle: \"Intro to Quarto Exercise\"\nauthor: \"Katja\"\ndate: today\nformat: \n  html: \n    code-fold: true\n    code-tools: true\n    toc: true\n    number-sections: true\nexecute:\n  warning: false\n---\n\n\n\nBracketed by ---\nDefines document-wide options\nSpecifies the output format\nCan include several parameters"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#markdown-text",
    "href": "topics/Quarto/slide_quarto1.html#markdown-text",
    "title": "Introduction to Quarto",
    "section": "Markdown text",
    "text": "Markdown text\n\nImages, tables, text, etc.\nFreely add and format text using markdown\n\n\n# Meet the penguins\nThe `palmerpenguins` data contains size measurements for three penguin species \nobserved on three islands in the Palmer Archipelago, Antarctica.\n\n![](./images/lter_penguins.png)\n\nThe three species of penguins have quite distinct \ndistributions of physical dimensions (@fig-penguins).\n\n## Bill dimensions"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#code-chunks",
    "href": "topics/Quarto/slide_quarto1.html#code-chunks",
    "title": "Introduction to Quarto",
    "section": "Code chunks",
    "text": "Code chunks\n\n\n\nCode blocks are called code chunks\nEvaluate code and show its output\nSpecify global and/or local chunk options (e.g. figure dimensions)\nAlso works with other languages (e.g. Python)\n\n\n\n\n## Bill dimensions\n```{r bill dimensions}\n#| label: fig-penguins\n#| warning: false\n#| fig-cap: \"Bill dimensions of penguins across three species.\"\n#| fig-width: 10\n#| fig-height: 5\n\npenguins %&gt;%\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 2) + \n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"darkorchid\",\"cyan4\")) + \n  labs(color = \"Species\", shape = \"Species\") + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  theme_bw()\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#rendering-quarto-document",
    "href": "topics/Quarto/slide_quarto1.html#rendering-quarto-document",
    "title": "Introduction to Quarto",
    "section": "Rendering Quarto document",
    "text": "Rendering Quarto document\n\n\nLive preview\n\nFrom R console: quarto::quarto_preview(\"report.qmd\")\nFrom terminal: quarto preview report.qmd\n\n\n\n\n\nRender\n\nInteractively using the Render button\nFrom R console: quarto::quarto_render(\"report.qmd\")\nFrom terminal: quarto render report.qmd"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#how-rendering-works",
    "href": "topics/Quarto/slide_quarto1.html#how-rendering-works",
    "title": "Introduction to Quarto",
    "section": "How rendering works?",
    "text": "How rendering works?"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#output-formats",
    "href": "topics/Quarto/slide_quarto1.html#output-formats",
    "title": "Introduction to Quarto",
    "section": "Output formats",
    "text": "Output formats\n\n\nReports and general documents (HTML, PDF, Jupyter Notebook, Microsoft Word)\nPresentations (reveal.js, PowerPoint, Beamer)\nInteractive documents (Observable, R Shiny)\nBooks, blogs and websites\nJournal articles"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#moving-between-output-formats-is-straightforward",
    "href": "topics/Quarto/slide_quarto1.html#moving-between-output-formats-is-straightforward",
    "title": "Introduction to Quarto",
    "section": "Moving between output formats is straightforward",
    "text": "Moving between output formats is straightforward\n\n\n\nDocument HTML\n\n lesson-1.qmd\n\ntitle: \"Lesson 1\"\nformat: html\n\n\n\nDocument PDF\n\n lesson-1.qmd\n\ntitle: \"Lesson 1\"\nformat: pdf\n\n\n\nPresentation\n\n lesson-1.qmd\n\ntitle: \"Lesson 1\"\nformat: revealjs\n\n\n\nWebsite\n\n _quarto.yml\n\nproject:\n  type: website\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd\n\n\n\n\nBook\n\n _quarto.yml\n\nproject:\n  type: book\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#key-advantages-of-quarto",
    "href": "topics/Quarto/slide_quarto1.html#key-advantages-of-quarto",
    "title": "Introduction to Quarto",
    "section": "Key advantages of Quarto",
    "text": "Key advantages of Quarto\n\n\nText, code snippets, and visualizations in a single document\nSupports multiple programming languages (R, Python, Julia, etc.)\nVarious output formats (HTML, PDF, presentations, etc.)\nCompatible with multiple editors (RStudio, VS Code, Jupyter Lab, etc.)\nInteractive elements (Shiny apps, HTML widgets, or JavaScript visualizations) can be incorporated directly into documents\nReproducible and transparent workflows\nEasy collaboration and sharing"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#sources",
    "href": "topics/Quarto/slide_quarto1.html#sources",
    "title": "Introduction to Quarto",
    "section": "Sources",
    "text": "Sources\n\n\nR for Data Science book\nHello Quarto\nGuides\nRaukR 2024 (Quarto by Roy Francis)\nGetting started with Quarto\nQuarto cheatsheet"
  },
  {
    "objectID": "topics/Quarto/slide_quarto1.html#section",
    "href": "topics/Quarto/slide_quarto1.html#section",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "Thank you. Questions?"
  },
  {
    "objectID": "home_syllabus.html",
    "href": "home_syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "SyllabusLearning outcomesEntry requirements\n\n\nThe syllabus for this workshop are as follows.\n\nAdvanced level\n\nUsing the language of graphics: ggplot2\nBasic and advanced plotting in ggplot2\nSingle-cell data visualizations with Seurat\nQuarto notebooks and reports\nDynamic plotting with Quarto\nInteractive web apps with Shiny\n\nBeginner level\n\nHandle data in R for visualizations\nApply ggplot grammar to get publication-grade plots\nCombine different data and/or different plots\nPCA, Heatmaps, Phylogenetic trees and Maps\n\n\n\n\nAfter this workshop you should be able to:\n\nAdvanced level\n\nHandle data in R for visualizations\nFamiliarize with ggplot2 functions and techniques at adavanced level\nCombine different data and/or different plots that are of publication-ready\nCreate interactive documents with Quarto for data exploration and analysis\nWrite your own simple Shiny app in R\n\nBeginner level\n\nHandle data in R for visualizations\nApply the grammar efficiently in ggplot to obtain the desired plot\nCombine different data and/or different plots that are of publication-grade\n\n\n\n\n\nFamiliarity with R and R Studio\nPlotting using standard R graphics\nParticipants are expected to use their own computers with pre-installed R, R Studio and different R packages (detailed instructions will be given upon acceptance)."
  },
  {
    "objectID": "home_precourse.html",
    "href": "home_precourse.html",
    "title": "Precourse",
    "section": "",
    "text": "Detailed instructions on the tools necessary for this course and the means of installation will be updated here closer to the schedule. So, keep an eye on this page until then.\n\n\n\n\n\n\nDownload course files\n\n\n\nPlease download all the necessary files from here and make sure that the directory tree looks similar to the one displayed in that page."
  },
  {
    "objectID": "home_precourse.html#installations",
    "href": "home_precourse.html#installations",
    "title": "Precourse",
    "section": "",
    "text": "Detailed instructions on the tools necessary for this course and the means of installation will be updated here closer to the schedule. So, keep an eye on this page until then.\n\n\n\n\n\n\nDownload course files\n\n\n\nPlease download all the necessary files from here and make sure that the directory tree looks similar to the one displayed in that page."
  },
  {
    "objectID": "home_precourse.html#preparations",
    "href": "home_precourse.html#preparations",
    "title": "Precourse",
    "section": "2 Preparations",
    "text": "2 Preparations\nTo prepare for the course, you can follow one of the links below to warm up your skills necessary for the course.\n\n\n\n\n\n\nTip\n\n\n\n\nBeginner-level: Basic warm-up exercises in R\nAdvanced-level: ggplot warm-up"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Using the language of graphics: ggplot2\nBasic and advanced plotting in ggplot2\nSingle-cell data visualizations with Seurat\nQuarto notebooks and reports\nDynamic plotting with quarto\nInteractive web apps with Shiny\n\n\n\nBeginner-level course content\n\n\nUpdated: 11-04-2025 at 08:35:17 ."
  },
  {
    "objectID": "index.html#advanced-data-visualization",
    "href": "index.html#advanced-data-visualization",
    "title": "",
    "section": "",
    "text": "Using the language of graphics: ggplot2\nBasic and advanced plotting in ggplot2\nSingle-cell data visualizations with Seurat\nQuarto notebooks and reports\nDynamic plotting with quarto\nInteractive web apps with Shiny\n\n\n\nBeginner-level course content\n\n\nUpdated: 11-04-2025 at 08:35:17 ."
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#quarto-dashboards",
    "href": "topics/Quarto/slide_quarto2.html#quarto-dashboards",
    "title": "Advanced Quarto",
    "section": "Quarto dashboards",
    "text": "Quarto dashboards\n\nA new output format for creating dashboards from notebooks/ .qmd files\nDashboards are a great way to share results from analyses with others \nMain goal: To make it simple to build compelling interactive dashboards using R, Python, Julia, and Observable\n\n\n\nDashboards examples\n\n\nYou already analyzed and summarize your data in computational notebooks with R and/or Python. What’s next? You can share your insights or allow others to make their own conclusions in eye-catching dashboards and straight-forward to author, design, and deploy Quarto Dashboards, regardless of the language of your data processing, visualization, analysis, etc. With Quarto Dashboards, you can create elegant and production-ready dashboards using a variety of components, including static graphics (ggplot2, Matplotlib, Seaborn, etc.), interactive widgets (Plotly, Leaflet, Jupyter Widgets, htmlwidgets, etc.), tabular data, value boxes, text annotations, and more. Additionally, with intelligent resizing of components, your Quarto Dashboards look great on devices of all sizes. And importantly, you can author Quarto Dashboards without leaving the comfort of your “home” – in plain text markdown with any text editor (VS Code, RStudio, Neovim, etc.) or any notebook editor (JupyterLab, etc.)."
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#dashboard-components",
    "href": "topics/Quarto/slide_quarto2.html#dashboard-components",
    "title": "Advanced Quarto",
    "section": "Dashboard components",
    "text": "Dashboard components\n\nDashboards are composed of cards\nCards content: plots, tables, value boxes…\nCards are arranged into rows and columns\nPages, tabsets, and sidebars allow for more advanced layouts"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#dashboard-basic-structure",
    "href": "topics/Quarto/slide_quarto2.html#dashboard-basic-structure",
    "title": "Advanced Quarto",
    "section": "Dashboard basic structure",
    "text": "Dashboard basic structure"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-1-format-dashboard",
    "href": "topics/Quarto/slide_quarto2.html#step-1-format-dashboard",
    "title": "Advanced Quarto",
    "section": "Step 1: format: dashboard",
    "text": "Step 1: format: dashboard\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n# notebook content goes here..."
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-2-add-a-card",
    "href": "topics/Quarto/slide_quarto2.html#step-2-add-a-card",
    "title": "Advanced Quarto",
    "section": "Step 2: Add a card",
    "text": "Step 2: Add a card\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-2-add-a-card-1",
    "href": "topics/Quarto/slide_quarto2.html#step-2-add-a-card-1",
    "title": "Advanced Quarto",
    "section": "Step 2: Add a card",
    "text": "Step 2: Add a card\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-3-add-another-card",
    "href": "topics/Quarto/slide_quarto2.html#step-3-add-another-card",
    "title": "Advanced Quarto",
    "section": "Step 3: Add another card",
    "text": "Step 3: Add another card\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-3-add-another-card-1",
    "href": "topics/Quarto/slide_quarto2.html#step-3-add-another-card-1",
    "title": "Advanced Quarto",
    "section": "Step 3: Add another card",
    "text": "Step 3: Add another card\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-4-add-titles-to-cards",
    "href": "topics/Quarto/slide_quarto2.html#step-4-add-titles-to-cards",
    "title": "Advanced Quarto",
    "section": "Step 4: Add titles to cards",
    "text": "Step 4: Add titles to cards\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-4-add-titles-to-cards-1",
    "href": "topics/Quarto/slide_quarto2.html#step-4-add-titles-to-cards-1",
    "title": "Advanced Quarto",
    "section": "Step 4: Add titles to cards",
    "text": "Step 4: Add titles to cards\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: dashboard\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-5-add-a-logo",
    "href": "topics/Quarto/slide_quarto2.html#step-5-add-a-logo",
    "title": "Advanced Quarto",
    "section": "Step 5: Add a logo",
    "text": "Step 5: Add a logo\n\nLogo added to the navigation bar\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat:\n  dashboard: \n    logo: ../assets/images/cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#step-5-add-a-logo-1",
    "href": "topics/Quarto/slide_quarto2.html#step-5-add-a-logo-1",
    "title": "Advanced Quarto",
    "section": "Step 5: Add a logo",
    "text": "Step 5: Add a logo\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat:\n  dashboard: \n    logo: ../assets/images/cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#layout",
    "href": "topics/Quarto/slide_quarto2.html#layout",
    "title": "Advanced Quarto",
    "section": "Layout",
    "text": "Layout\n\nRows\n\nBy default, cards are laid out in rows\n\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat:\n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\n```\n\n## Row - Gender {height=70%}\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Row - Temperature {height=30%}\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#layout---rows",
    "href": "topics/Quarto/slide_quarto2.html#layout---rows",
    "title": "Advanced Quarto",
    "section": "Layout - Rows",
    "text": "Layout - Rows\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat:\n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n## Row - Gender {height=70%}\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Row - Temperature {height=30%}\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#layout-1",
    "href": "topics/Quarto/slide_quarto2.html#layout-1",
    "title": "Advanced Quarto",
    "section": "Layout",
    "text": "Layout\n\nColumns\n\nSetting orientation to columns makes each ## indicate a column instead of a row\n\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    orientation: columns\n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n## Column - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Column - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#layout---columns",
    "href": "topics/Quarto/slide_quarto2.html#layout---columns",
    "title": "Advanced Quarto",
    "section": "Layout - Columns",
    "text": "Layout - Columns\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    orientation: columns\n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n## Column - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Column - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#tabsets",
    "href": "topics/Quarto/slide_quarto2.html#tabsets",
    "title": "Advanced Quarto",
    "section": "Tabsets",
    "text": "Tabsets\n\nPut content in different tabs\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n## Row - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Row - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n### Tabsets of plots {.tabset}\n```{r}\n#| title: Gender\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: Temperature\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#tabsets-1",
    "href": "topics/Quarto/slide_quarto2.html#tabsets-1",
    "title": "Advanced Quarto",
    "section": "Tabsets",
    "text": "Tabsets\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n## Row - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n## Row - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n### Tabsets of plots {.tabset}\n```{r}\n#| title: Gender\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n```{r}\n#| title: Temperature\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#pages",
    "href": "topics/Quarto/slide_quarto2.html#pages",
    "title": "Advanced Quarto",
    "section": "Pages",
    "text": "Pages\n\nNew page is created with a Level I heading (#)\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n# Page 1\n## Row - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n# Page 2\n## Row - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#pages-1",
    "href": "topics/Quarto/slide_quarto2.html#pages-1",
    "title": "Advanced Quarto",
    "section": "Pages",
    "text": "Pages\n\n\n\n\nmy-dashboard.qmd\n\n---\ntitle: \"Immunotechnology Cake Club\"\nformat: \n  dashboard: \n    logo: ./cake-emoji.png\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n# Page 1\n## Row - Gender\n\n```{r}\n#| title: Who bakes better?\ncake_data %&gt;%\n    ggplot(aes(x = Gender, y = Score, fill = Gender)) +\n    geom_boxplot() +\n    theme_minimal() +\n    theme_bw() + \n    scale_fill_manual(values = c(\"#F5E8E1\", \"#D0BBA8\")) + \n    labs(x = \"Gender\", y = \"Score\") + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```\n\n# Page 2\n## Row - Temperature\n\n```{r}\n#| title: How does outdoor temperature influence final score?\ncake_data %&gt;%\n    ggplot(aes(x = Temperature, y = Score)) +\n    geom_line( color=\"darkgrey\") +\n    geom_point(shape=21, color=\"black\", fill=\"#DBD9DA\", size=6) + \n    theme_bw() + \n    theme(axis.text = element_text(size = 20),\n    axis.title = element_text(size = 20),\n    legend.text = element_text(size = 20), \n    legend.title = element_text(size = 20))\n```"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#interactive-dashboards",
    "href": "topics/Quarto/slide_quarto2.html#interactive-dashboards",
    "title": "Advanced Quarto",
    "section": "Interactive dashboards",
    "text": "Interactive dashboards\n\nQuarto dashboards can include interactive Shiny components (e.g. a plot with sliders that control its inputs)\nQuarto dashboard with Shiny"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#extra-material",
    "href": "topics/Quarto/slide_quarto2.html#extra-material",
    "title": "Advanced Quarto",
    "section": "Extra Material",
    "text": "Extra Material\n\nOfficial quarto extensions\nAn awesome list of Quarto content\nA gallery of Quarto examples"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#sources",
    "href": "topics/Quarto/slide_quarto2.html#sources",
    "title": "Advanced Quarto",
    "section": "Sources",
    "text": "Sources\n\nQuarto Dashboards\nHello, Dashboards!\nQuarto Dashboard video by Charles Teague\nFrom Notebooks to Dashboards with Quarto\nDashboard layout\nDashboard options\nQuarto Dashboards - NCEAS"
  },
  {
    "objectID": "topics/Quarto/slide_quarto2.html#section",
    "href": "topics/Quarto/slide_quarto2.html#section",
    "title": "Advanced Quarto",
    "section": "",
    "text": "Thank you. Questions?"
  },
  {
    "objectID": "home_contents.html",
    "href": "home_contents.html",
    "title": "Contents",
    "section": "",
    "text": "Note\n\n\n\nThe contents of this course are currently being generated. It will be updated here regularly until the course. Please check the Schedule for the proposed topics and updated materials.\n\n\n\n\n\n\n\n\n\n\n\n\nTopic\nLecture\nTutorial\n\n\n\n\nggplot\n\n\nBasic ggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced ggplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPCA plot\n\n\n\n\nOthers Day 1\n\n\nVector and Bitmap images\n\n\n\n\n\n\n\n\n\nSingle-cell data\n\n\n\n\nQuarto\n\n\nBasic Quarto\n\n\n\n\n\n\n\n\n\nAdvanced Quarto\n\n\n\n\n\n\n\n\n\nDynamic Plotting\n\n\nIntro Dynamic plotting\n\n\n\n\n\n\n\n\n\nAdvanced Dynamic plotting\n\n\n\n\nRshiny\n\n\nRshiny Part I\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRshiny Part II\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRshiny Part III\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   Slides    Lab"
  },
  {
    "objectID": "topics/Shiny/lab_shiny1.html",
    "href": "topics/Shiny/lab_shiny1.html",
    "title": "RShiny Lab: Part I",
    "section": "",
    "text": "This is an introduction to shiny web applications with R. Please follow the exercise to familiarise yourself with the fundamentals. And then you can follow instructions to build an app with interactive plots related to the Covid data. Code chunks starting with shinyApp() can be simply copy-pasted to the RStudio console and run. Generally, complete shiny code is saved as a text file, named for example, as app.R and then clicking Run app launches the app.\n\n\n\n1 UI • Layout\nThis is an example to show the layout of widgets on a webpage using shiny functions. fluidPage() is used to define a responsive webpage. titlePanel() is used to define the top bar. sidebarLayout() is used to create a layout that includes a region on the left called side bar panel and a main panel on the right. The contents of these panels are further defined under sidebarPanel() and mainPanel().\nIn the main panel, the use of tab panels are demonstrated. The function tabsetPanel() is used to define a tab panel set and individual tabs are defined using tabPanel(). fluidRow() and column() are used to structure elements within each tab. The width of each column is specified. Total width of columns must add up to 12.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\n\nui &lt;- fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(tabsetPanel(\n      tabPanel(\"tab1\",\n               fluidRow(\n                 column(6,helpText(\"Col1\")),\n                 column(6,\n                        helpText(\"Col2\"),\n                        fluidRow(\n                          column(4,style=\"background-color:#b0c6fb\",\n                                 helpText(\"Col1\")\n                          ),\n                          column(4,style=\"background-color:#ffa153\",\n                                 helpText(\"Col2\")\n                          ),\n                          column(4,style=\"background-color:#b1f6c6\",\n                                 helpText(\"Col3\")\n                          )\n                        )\n                 )\n               )\n      ),\n      tabPanel(\"tab2\",\n               inputPanel(helpText(\"Input Panel\"))\n      ),\n      tabPanel(\"tab3\",\n               wellPanel(helpText(\"Well Panel\"))\n      )\n    )\n    )\n  )\n)\nserver &lt;- function(input,output){}\nshinyApp(ui=ui,server=server)\n\n\n2 UI • Widgets • Input\nInput widgets are used to accept content interactively from the user. These widgets usually end in Input like selectInput(). Below are usage examples of several of shiny’s built-in widgets. Every widget has a variable name which is accessible through input$ in the server function. For example, the value of a variable named text-input would be accessed through input$text-input.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(6,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output){},\noptions=list(height=900))\n\n\n3 UI • Widgets • Outputs\nSimilar to input widgets, output widgets are used to display information to the user on the webpage. These widgets usually end in Output like textOutput(). Every widget has a variable name accessible under output$ to which content is written in the server function. Render functions are used to write content to output widgets. For example renderText() is used to write text data to textOutput() widget.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\n  ui=fluidPage(fluidRow(column(6,\n             textInput(\"text_input\",label=\"textInput\",value=\"&lt;h3 style='color:red'&gt;Red text&lt;/h3&gt;\"),\n             hr(),\n             htmlOutput(\"html_output\"),\n             textOutput(\"text_output\"),\n             verbatimTextOutput(\"verbatim_text_output\"),\n             tableOutput(\"table_output\"),\n             plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n      ))),\n  server=function(input, output) {\n    output$html_output &lt;- renderText({input$text_input})\n    output$text_output &lt;- renderText({input$text_input})\n    output$verbatim_text_output &lt;- renderText({input$text_input})\n    output$table_output &lt;- renderTable({iris[1:3,1:3]})\n    output$plot_output &lt;- renderPlot({\n      plot(iris[,1],iris[,2])\n    })\n},\noptions=list(height=700))\nIn this example, we have a text input box which takes user text and outputs it in three different variations. The first output is html output htmlOutput(). Since the default text is html content, the output is red coloured text. A normal non-html text would just look like normal text. The second output is normal text output textOutput(). The third variation is verbatimTextOutput() which displays text in monospaced code style. This example further shows table output and plot output.\n\n\n4 Dynamic UI\nSometimes we want to add, remove or change currently loaded UI widgets conditionally based on dynamic changes in code execution or user input. Conditional UI can be defined using conditionalPanel(), uiOutput()/renderUI(), insertUI() or removeUI. In this example, we will use uiOutput()/renderUI().\nIn the example below, the output plot is displayed only if the selected dataset is iris.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\"),\n  uiOutput(\"ui\")\n),\nserver=function(input,output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  \n  output$ui &lt;- renderUI({\n    if(input$data_input==\"iris\") plotOutput(\"plot_output\",width=\"400px\")\n  })\n  \n  output$plot_output &lt;- renderPlot({hist(getdata()[, 1])})\n  output$table_output &lt;- renderTable({head(getdata())})\n})\nHere, conditional UI is used to selectively display an output widget (plot). Similarly, this idea can be used to selectively display any input or output widget.\n\n\n5 Session info\n\nsessionInfo()\n\nR version 4.4.3 (2025-02-28)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 24.04.1 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.1 shiny_1.10.0 \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5       cli_3.6.4         knitr_1.50        rlang_1.1.5      \n [5] xfun_0.51         generics_0.1.3    promises_1.3.2    jsonlite_1.9.0   \n [9] xtable_1.8-4      glue_1.8.0        colorspace_2.1-1  htmltools_0.5.8.1\n[13] httpuv_1.6.15     scales_1.3.0      rmarkdown_2.29    grid_4.4.3       \n[17] tibble_3.2.1      evaluate_1.0.3    munsell_0.5.1     fastmap_1.2.0    \n[21] yaml_2.3.10       lifecycle_1.0.4   compiler_4.4.3    dplyr_1.1.4      \n[25] pkgconfig_2.0.3   htmlwidgets_1.6.4 Rcpp_1.0.14       later_1.4.1      \n[29] digest_0.6.37     R6_2.6.1          tidyselect_1.2.1  pillar_1.10.1    \n[33] magrittr_2.0.3    withr_3.0.2       tools_4.4.3       gtable_0.3.6     \n[37] mime_0.12"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#contents",
    "href": "topics/Shiny/slide_shiny2.html#contents",
    "title": "R Shiny - Part II",
    "section": "Contents",
    "text": "Contents\n\nReactivity\nObservers\nUpdating Widgets\nError Validation\nDownload"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactivity",
    "href": "topics/Shiny/slide_shiny2.html#reactivity",
    "title": "R Shiny - Part II",
    "section": "Reactivity",
    "text": "Reactivity\n\nCode doesn’t always run line-by-line (Non-linear execution)\nCode executes when dependencies change\n\n\nreactlog"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactives",
    "href": "topics/Shiny/slide_shiny2.html#reactives",
    "title": "R Shiny - Part II",
    "section": "Reactives",
    "text": "Reactives\nFunctions with reactive context\n\nreactive(): Defines an expression\nreactiveVal(): Defines single value\nreactiveValues(): Defines a list of values\n\nRegular function fn &lt;- function(): Runs wherever it is is used\nReactive function fn &lt;- reactive(): Runs only when input changes"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-context",
    "href": "topics/Shiny/slide_shiny2.html#reactive-context",
    "title": "R Shiny - Part II",
    "section": "Reactive context",
    "text": "Reactive context\nReactive values cannot be accessed outside a reactive context\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"num\", \"Enter number\",\n                 value = 1),\n    textOutput(\"result\")\n  ),\n  server = function(input, output) {\n    val = input$num^2\n    output$result &lt;- renderText({\n      paste(\"Squared number is:\", val)\n    })\n  }\n)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-dynamics",
    "href": "topics/Shiny/slide_shiny2.html#reactive-dynamics",
    "title": "R Shiny - Part II",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\")),\n  server=function(input,output) {\n    output$text_output &lt;- renderText({\n        mean(rnorm(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-dynamics-1",
    "href": "topics/Shiny/slide_shiny2.html#reactive-dynamics-1",
    "title": "R Shiny - Part II",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    output$text_output1 &lt;- renderText({\n      mean(rnorm(input$num_input))\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rnorm(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-dynamics-2",
    "href": "topics/Shiny/slide_shiny2.html#reactive-dynamics-2",
    "title": "R Shiny - Part II",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    rand &lt;- function(x) rnorm(x)\n    output$text_output1 &lt;- renderText({\n      mean(rand(input$num_input))\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rand(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-dynamics-3",
    "href": "topics/Shiny/slide_shiny2.html#reactive-dynamics-3",
    "title": "R Shiny - Part II",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")\n    ),\n  server=function(input,output) {\n    rand &lt;- reactive({ rnorm(input$num_input) })\n    output$text_output1 &lt;- renderText({\n      mean(rand())\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rand())\n    })\n  })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactive functions can be use to share output from a common source. They can be used to reduce computation for demanding functions. Reactive values cannot be accessed from outside the reactive environment.\nTry changing the reactive function\nrand &lt;- reactive({ rnorm(input$num_input) })\nto a regular function\nrand &lt;- function(){ rnorm(input$num_input) }\nSaving a reactlog,\n\n# reset log\nreactlogReset()\n# run the app and exit\n# save react log as text\ndput(shiny::reactlog(), file = \"assets/reactlog-reactivity-3.txt\")\n# open and visualize\n\"assets/reactlog-reactivity-3.txt\" |&gt;\n  dget() |&gt;\n  reactlog::reactlog_show()"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#reactive-values",
    "href": "topics/Shiny/slide_shiny2.html#reactive-values",
    "title": "R Shiny - Part II",
    "section": "Reactive values",
    "text": "Reactive values\n\nreactVal() reactValues()\nStore reactive values that can be accessed from any reactive context\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    actionButton(\"add\",\"Add\"),\n    actionButton(\"subtract\",\"Subtract\"),\n    textOutput(\"counter\")\n  ),\n  server = function(input, output) {\n    reactive_values &lt;- reactiveValues(counter = 0) \n    \n    observeEvent(input$add, {\n      reactive_values$counter &lt;- reactive_values$counter + 1\n    }) \n    observeEvent(input$subtract, {\n      reactive_values$counter &lt;- reactive_values$counter - 1\n    }) \n  \n    output$counter &lt;- renderText({\n      reactive_values$counter\n    })\n  }\n)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#controlling-reactivity-using-action-buttons",
    "href": "topics/Shiny/slide_shiny2.html#controlling-reactivity-using-action-buttons",
    "title": "R Shiny - Part II",
    "section": "Controlling reactivity using action buttons",
    "text": "Controlling reactivity using action buttons\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  actionButton(\"btn_go\", \"Go!\"),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n  evr &lt;- eventReactive(input$btn_go, {\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  })\n  \n  output$fahrenheit &lt;- renderText({\n    evr()\n  })\n  \n  #output$fahrenheit &lt;- renderText({\n  #    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  #  }) |&gt;\n  #  bindEvent(input$btn_go)\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#observers",
    "href": "topics/Shiny/slide_shiny2.html#observers",
    "title": "R Shiny - Part II",
    "section": "Observers",
    "text": "Observers\nReactive functions that automatically re-executes whenever its dependencies change. Usually used for side-effects rather than returning a value.\nobserve()\nDoesn’t return a value. Constantly runs as long as the app is alive.\nobserveEvent()\nSimilar to observe(), but only re-executes on specific event (like a button click). Doesn’t return a value.\neventReactive()\nSimilar to observeEvent(), but returns a value.\nbindEvent()\nBind an action to a specific event. Similar to observeEvent(), but allows for the event to be determined dynamically. Links an input (like a button) to an output and ensures that reactive expressions are only updated when bound event is triggered.\n\nObservers are reactive functions that run when their dependencies change similar to regular reactive output functions,affect HTML output. Observers are used for side-effect."
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#updating-widgets",
    "href": "topics/Shiny/slide_shiny2.html#updating-widgets",
    "title": "R Shiny - Part II",
    "section": "Updating widgets",
    "text": "Updating widgets\n\nWidgets can be updated once initialised.\n\n\n\nExample of a typical UI\n\n\n\nui=fluidPage(\n  selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n  numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n  sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n)\n\n\n\n\n\nAdd third argument session to server function\nUpdate functions can be used to update input widgets\nReactive observer observe({}) monitors for a conditional change\n\n\n\nserver=function(input,output,session) {\n  observe({\n    if(something) {\n      updateSelectInput(session,\"select-input\",label=\"selectInput\",choices=c(\"D\",\"E\",\"F\"))\n      updateNumericInput(session,\"numeric-input\",label=\"numericInput\",value=10,min=1,max=10)\n      updateSliderInput(session,\"slider-input\",label=\"sliderInput\",value=8,min=1,max=10)\n    }\n  })\n}"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#updating-widgets-1",
    "href": "topics/Shiny/slide_shiny2.html#updating-widgets-1",
    "title": "R Shiny - Part II",
    "section": "Updating widgets",
    "text": "Updating widgets\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"data\", \"Choose a dataset:\", choices = c(\"mtcars\", \"iris\", \"faithful\")),\n    selectInput(\"variable\", \"Choose a variable:\", choices = names(mtcars))\n  ),\n  \n  server = function(input, output, session) {\n    \n    dataset &lt;- reactive({\n      switch(input$data,\n             \"mtcars\" = mtcars,\n             \"iris\" = iris,\n             \"faithful\" = faithful)\n    })\n    \n    observe({\n      updateSelectInput(session,\"variable\",choices=names(dataset()))\n    })\n  }\n)"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#updating-widgets-2",
    "href": "topics/Shiny/slide_shiny2.html#updating-widgets-2",
    "title": "R Shiny - Part II",
    "section": "Updating widgets",
    "text": "Updating widgets\n\n\n\nInput function\nUpdate function\n\n\n\n\ncheckboxInput()\nupdateCheckboxInput()\n\n\ncheckboxGroupInput()\nupdateCheckboxGroupInput()\n\n\nradioButtons()\nupdateRadioButtons()\n\n\ndateInput()\nupdateDateInput()\n\n\ndateRangeInput()\nupdateDateRangeInput()\n\n\nfileInput()\n\n\n\nnumericInput()\nupdateNumericInput()\n\n\nsliderInput()\nupdateSliderInput()\n\n\ntextInput()\nupdateTextInput()\n\n\ntextAreaInput()\nupdateTextAreaInput()\n\n\npasswordInput()\n\n\n\nselectInput()\nupdateSelectInput()\n\n\nactionButton()\n\n\n\nsubmitButton()\n\n\n\ntabsetPanel()\nupdateTabsetPanel()\n\n\nnavbarPage()\nupdateNavbarPage()"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#error-validation",
    "href": "topics/Shiny/slide_shiny2.html#error-validation",
    "title": "R Shiny - Part II",
    "section": "Error validation",
    "text": "Error validation\n\nShiny returns an error with missing or incorrect values\n\n\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input,'package:datasets') })\n  output$table_output &lt;- renderTable({head(getdata())})\n})\n\n\n\n\n\n\n\n\nErrors can be handled in a controlled manner"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#error-validation-1",
    "href": "topics/Shiny/slide_shiny2.html#error-validation-1",
    "title": "R Shiny - Part II",
    "section": "Error validation",
    "text": "Error validation\n\n\nvalidate() can be used to check input\nvalidate() using need()\n\n\n\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\nserver=function(input, output) {\n  getdata &lt;- reactive({ \n  validate(need(try(input$data_input),\"Please select a data set\"))\n    get(input$data_input,'package:datasets') \n    })\n  output$table_output &lt;- renderTable({head(getdata())})\n})"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#error-validation-2",
    "href": "topics/Shiny/slide_shiny2.html#error-validation-2",
    "title": "R Shiny - Part II",
    "section": "Error validation",
    "text": "Error validation\n\nvalidate() using custom function\n\n\n\n\nvalfn &lt;- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"Input data is incorrect.\")\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\nserver=function(input,output) {\n  getdata &lt;- reactive({ \n  validate(valfn(try(input$data_input)))\n    get(input$data_input,'package:datasets')\n    })\n  output$table_output &lt;- renderTable({head(getdata())})\n})\n\n\n\n\n\n\n\n\nshiny::req() checks input variable and silently stops execution"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#download-data",
    "href": "topics/Shiny/slide_shiny2.html#download-data",
    "title": "R Shiny - Part II",
    "section": "Download • Data",
    "text": "Download • Data\n\nAdd button and downloadHandler() function\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  downloadButton(\"button_download\",\"Download\")\n),\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n  \n  output$button_download &lt;- downloadHandler(\n  filename = function() {\n     paste0(input$data_input,\".csv\")\n   },\n  content = function(file) {\n     write.csv(getdata(),file,row.names=FALSE,quote=F)\n   })\n})\n\n\nRun in system browser if Rstudio browser doesn’t work"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#download-plots",
    "href": "topics/Shiny/slide_shiny2.html#download-plots",
    "title": "R Shiny - Part II",
    "section": "Download • Plots",
    "text": "Download • Plots\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  plotOutput(\"plot_output\",width=\"400px\"),\n  downloadButton(\"button_download\", \"Download\")\n),\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n  output$plot_output &lt;- renderPlot({hist(getdata()[, 1])})\n  \noutput$button_download &lt;- downloadHandler(\n  filename = function() {\n    paste0(input$data_input,\".png\")\n  },\n  content = function(file) {\n    png(file)\n    hist(getdata()[, 1])\n    dev.off()\n  })\n})\n\n\nRun in system browser if Rstudio browser doesn’t work\nSee usage of download buttons"
  },
  {
    "objectID": "topics/Shiny/slide_shiny2.html#section",
    "href": "topics/Shiny/slide_shiny2.html#section",
    "title": "R Shiny - Part II",
    "section": "",
    "text": "Thank you. Questions?\nSlide inspirations: Roy Francis (NBIS, RaukR2024)"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#dynamic-and-interactive-applications",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#dynamic-and-interactive-applications",
    "title": "Dynamic applications",
    "section": "Dynamic and Interactive applications",
    "text": "Dynamic and Interactive applications\n\n\nDynamic applications may resemble interactive Shiny dashboards in terms of appearance and user experience, but they differ significantly in structure. These applications are standalone and do not rely on a server component. Instead, all interactive features are pre-built within the application itself, and the final product is generated as an HTML file, ready to be hosted on a web platform. Tools like Quarto (and its predecessor, RMarkdown) are often used to create such dynamic applications.\nInteractive applications consist of both, a user interface (UI) and server, enabling users to send requests to the server through the UI. This setup allows the application’s components to be reactive, meaning the content displayed on the UI dynamically responds to the user’s inputs, creating a fully interactive experience. To build these applications, you need R scripts that define the UI and server components, either as separate or combined scripts.\nIn this workshop, we will cover both dynamic and interactive applications. First, we will explore how to create dynamic applications using Quarto, especially how to incorporate dynamic components directly into a Quarto HTML document and consequently incorporate interactivity without learning JavaScript or requiring a Shiny Server to view your document.\nThen, we will dive into building interactive applications with Shiny, focusing on the structure and components required for their development. By the end of today and tomorrow, you will have a clear understanding of the differences between these two approaches and the tools needed to implement them effectively."
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#quarto-using-htmlwidgets",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#quarto-using-htmlwidgets",
    "title": "Dynamic applications",
    "section": "Quarto using htmlwidgets",
    "text": "Quarto using htmlwidgets\n\n\nHTML widgets work just like R plots except they produce interactive web visualizations\nDo not require any knowledge of JavaScript, nor use of a Shiny Server\nThere are many widgets to choose from, most known are:\n\nplotly\nggiraph\nleaflet\nDT"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#plotly",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#plotly",
    "title": "Dynamic applications",
    "section": "plotly",
    "text": "plotly\n\n\n```{r}\nlibrary(plotly)\nlibrary(palmerpenguins)\npenguins %&gt;%\n    plot_ly(x = ~body_mass_g, y = ~flipper_length_mm, \n    color = ~sex, width = 550, height = 400) %&gt;%\n    add_markers()\n```\n\n\n\n\n\nFig.1: Body mass and flipper length of Palmer penguins"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#ggiraph",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#ggiraph",
    "title": "Dynamic applications",
    "section": "ggiraph",
    "text": "ggiraph\n\n\n\n\nWorks similar to plotly\nIt can connect 2 or more charts together\n\n\n```{r}\n#| fig-width: 14\n#| fig-height: 10\nlibrary(ggiraph)\nlibrary(ggplot2)\nlibrary(patchwork)\n\ntb_data &lt;- read.csv(\"./data/bcg-immunization-coverage-for-tb-among-1-year-olds.csv\", sep = \",\", header = T)\n\ntb_data_filt &lt;- tb_data[tb_data$Year == 2020 & tb_data$Share_of_newborns &lt; 60, ]\n\np1 &lt;- ggplot(tb_data_filt, aes(x = Entity, y = Share_of_newborns)) +\n    geom_col_interactive(aes(color = Entity, tooltip = Share_of_newborns, fill = Entity)) +\n    theme_minimal() +\n    labs(x = \"Entity\", y = \"Share of Newborns (%)\") + \n    coord_flip() + \n    scale_color_manual(values =c (\"#88CCEE\", \"#44AA99\", \"#117733\", \"#332288\", \"#DDCC77\", \"#999933\")) + \n    scale_fill_manual(values =c (\"#88CCEE\", \"#44AA99\", \"#117733\", \"#332288\", \"#DDCC77\", \"#999933\")) + \n    theme(axis.text = element_text(size = 18),\n    axis.title = element_text(size = 18),\n    legend.text = element_text(size = 18), \n    legend.title = element_text(size = 18))\n\ntb_data_filt1 &lt;- tb_data[tb_data$Year == 2023 & tb_data$Share_of_newborns &lt; 60, ]\n\np2 &lt;- ggplot(tb_data_filt1, aes(x = Entity, y = Share_of_newborns)) +\n    geom_col_interactive(aes(color = Entity, tooltip = Share_of_newborns, fill = Entity)) +\n    theme_minimal() +\n    labs(x = \"Entity\", y = \"Share of Newborns (%)\") + \n    coord_flip() + \n    scale_color_manual(values =c (\"#117733\", \"#332288\", \"#CC6677\", \"#999933\")) + \n    scale_fill_manual(values =c (\"#117733\", \"#332288\", \"#CC6677\", \"#999933\")) + \n    theme(axis.text = element_text(size = 18), \n    axis.title = element_text(size = 18),\n    legend.text = element_text(size = 18), \n    legend.title = element_text(size = 18)) \n\ngirafe(ggobj = (p1 + p2))\n```\n\n\n\n\n\n\n\n\n\nData used: https://ourworldindata.org/grapher/bcg-immunization-coverage-for-tb-among-1-year-olds?time=2020"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#leaflet",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#leaflet",
    "title": "Dynamic applications",
    "section": "leaflet",
    "text": "leaflet\n\n\nFor creating dynamic maps that support panning and zooming along with various annotations like markers, basemaps, and pop-ups\nLet’s check where NBIS has drop-ins on Wednesdays at 10.30 in Lund\n\n\n\n\n\n```{r}\nlibrary(leaflet)\n\ndf &lt;- data.frame(lng = c(13.20279, 13.20869, 13.21894),\n                 lat = c(55.71118, 55.71414, 55.71092))\n\nicons_list &lt;- awesomeIcons(icon = 'briefcase',\n  iconColor = 'white',\n  library = 'ion', \n  markerColor = \"cadetblue\")\n\nleaflet(width = \"100%\") %&gt;%\n  addTiles() %&gt;%\n  setView(lng = 13.21014,lat = 55.71208, zoom = 12) %&gt;%\n  addAwesomeMarkers(data = df, icon = icons_list, popup = c(\"Forum Medicum Café\", \"Café Le Mani\", \"MV Inspira\"))\n```"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#dt",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#dt",
    "title": "Dynamic applications",
    "section": "DT",
    "text": "DT\n\n\n```{r}\nlibrary(DT)\n\ntb_data &lt;- read.csv(\"./data/bcg-immunization-coverage-for-tb-among-1-year-olds.csv\", sep = \",\", header = T)\n\ndatatable(tb_data, filter = \"top\", class = 'cell-border stripe')\n```"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#quarto-using-crosstalk",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#quarto-using-crosstalk",
    "title": "Dynamic applications",
    "section": "Quarto using crosstalk",
    "text": "Quarto using crosstalk\n```{r}\nlibrary(crosstalk)\nlibrary(DT)\nlibrary(plotly)\n\ntb_data &lt;- read.csv(\"./data/bcg-immunization-coverage-for-tb-among-1-year-olds.csv\", sep = \",\", header = T)\ntb_data_filt &lt;- tb_data[grepl(\"^N\", tb_data$Entity) & tb_data$Year == 2000, ]\ntb_data_cross &lt;- SharedData$new(tb_data_filt)\n\nbscols(\n  list(filter_checkbox(\"Entity\", \"Entity\", tb_data_cross, ~Entity, inline = TRUE)),\n  plot_ly(tb_data_cross, x = ~Entity, y=~Share_of_newborns),\n  datatable(tb_data_cross, width = \"100%\")\n)\n```\n\n\n\n\n\n\nEntity\n\n\n\nNamibia\n\n\n\nNauru\n\n\n\nNepal\n\n\n\nNicaragua\n\n\n\nNiger\n\n\n\nNigeria\n\n\n\nNiue\n\n\n\nNorth Korea\n\n\n\nNorth Macedonia"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#observablejs",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#observablejs",
    "title": "Dynamic applications",
    "section": "ObservableJS",
    "text": "ObservableJS\n\n\nQuarto supports OJS for interactive visualizations in the browser\n{ojs} executable code block\n\n\n```{ojs}\n// Load the dataset from a CSV file\ndata = FileAttachment(\"./data/bcg-immunization-coverage-for-tb-among-1-year-olds.csv\").csv()\n\n// Create a range slider to select the year dynamically\nviewof year = Inputs.range([2000, 2023], {step: 1, value: 2010, label: \"Year\"})\n\n// Create a checkbox input to filter data by specific entities\nviewof entity = Inputs.checkbox(\n  [\"Bangladesh\", \"Belarus\", \"Belize\", \"Benin\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burundi\"], \n  { value: [\"Belarus\", \"Belize\", \"Bolivia\", \"Brasil\", \"Bulgaria\"], \n    label: \"Entity:\"\n  }\n)\n\n// Filter the dataset based on the selected year and entity\nfilteredData = data.filter(d =&gt; d.Year == year && entity.includes(d.Entity))\n\n// Generate a bar plot using the filtered data\nPlot.plot({\n    marks: [\n        Plot.barY(filteredData, {x: \"Entity\", y: \"Share_of_newborns\", fill: \"Entity\"})\n    ],\n    x: {label: \"Entity\"}, // Label for the x-axis\n    y: {label: \"Share of Newborns (%)\"}, // Label for the y-axis\n    color: {legend: true} // enable the color legend\n})\n```"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#observablejs-1",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#observablejs-1",
    "title": "Dynamic applications",
    "section": "ObservableJS",
    "text": "ObservableJS\n\n\nQuarto supports OJS for interactive visualizations in the browser\n{ojs} executable code block\n\n\n\ndata = FileAttachment(\"./data/bcg-immunization-coverage-for-tb-among-1-year-olds.csv\").csv()\n\n// Create a range slider to select the year dynamically\nviewof year = Inputs.range([2000, 2023], {step: 1, value: 2010, label: \"Year\"})\n\n// Create a checkbox input to filter data by specific entities\nviewof entity = Inputs.checkbox(\n  [\"Bangladesh\", \"Belarus\", \"Belize\", \"Benin\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burundi\"], \n  { value: [\"Belarus\", \"Belize\", \"Bolivia\", \"Brasil\", \"Bulgaria\"], \n    label: \"Entity:\"\n  }\n)\n\n// Filter the dataset based on the selected year and entity\nfilteredData = data.filter(d =&gt; d.Year == year && entity.includes(d.Entity))\n\n// Generate a bar plot using the filtered data\nPlot.plot({\n    marks: [\n        Plot.barY(filteredData, {x: \"Entity\", y: \"Share_of_newborns\", fill: \"Entity\"})\n    ],\n    x: {label: \"Entity\"}, // Label for the x-axis\n    y: {label: \"Share of Newborns (%)\"}, // Label for the y-axis\n    color: {legend: true} // enable the color legend\n})"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#sources",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#sources",
    "title": "Dynamic applications",
    "section": "Sources",
    "text": "Sources\n\nhtmlwidgets\nQuarto Tips & Tricks\nObservable JS\nOur World in Data"
  },
  {
    "objectID": "topics/dynamic_plotting/slide_dynamic_plot1.html#section",
    "href": "topics/dynamic_plotting/slide_dynamic_plot1.html#section",
    "title": "Dynamic applications",
    "section": "",
    "text": "Thank you. Questions?"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#contents",
    "href": "topics/ggplot/slide_gg1.html#contents",
    "title": "Introduction to ggplot",
    "section": "Contents",
    "text": "Contents\n\nQuick checkup\nR Basics\nData Types and Formats\nR Tips\nGrammar of Graphics\n\nGeoms\nAesthetics\nScales\nFacets"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#quick-checkups",
    "href": "topics/ggplot/slide_gg1.html#quick-checkups",
    "title": "Introduction to ggplot",
    "section": "Quick checkups",
    "text": "Quick checkups\n\n\n\n\nCoffee breaks (Morning and afternoon fika)\nWebpage structure\nPlots from drop-down\nTimes mentioned in schedule are super arbitrary"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#r-basics",
    "href": "topics/ggplot/slide_gg1.html#r-basics",
    "title": "Introduction to ggplot",
    "section": "R basics",
    "text": "R basics\n\nn &lt;- c(2,3,4,2,1,2,4,5,10,11,8,9)\nprint(n)\n\n [1]  2  3  4  2  1  2  4  5 10 11  8  9\n\n\n\n\nz &lt;- n +3\nprint(z)\n\n [1]  5  6  7  5  4  5  7  8 13 14 11 12\n\n\n\n\n\nz &lt;- n +3\nmean(z)\n\n[1] 8.083333\n\n\n\n\n\ns &lt;- c(\"I\", \"love\", \"Batman\")\nprint(s)\n\n[1] \"I\"      \"love\"   \"Batman\""
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#data-types",
    "href": "topics/ggplot/slide_gg1.html#data-types",
    "title": "Introduction to ggplot",
    "section": "Data types",
    "text": "Data types\n\nint stands for integers\ndbl stands for doubles or real numbers\nchr stands for character vectors or strings\ndttm stands for date and time,\nlgl stands for logical with just TRUE or FALSE\nfctr stands for factors which R uses to state categorical variables\ndate stands for dates\n\nYou can find what kind of vectors you have or imported by using the function class()"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#data-formats",
    "href": "topics/ggplot/slide_gg1.html#data-formats",
    "title": "Introduction to ggplot",
    "section": "Data Formats",
    "text": "Data Formats\n\n\nWide format\n\n\n\n\n\n\n\nSample_1\nSample_2\nSample_3\nSample_4\n\n\n\n\nENSG00000000003\n321\n303\n204\n492\n\n\nENSG00000000005\n0\n0\n0\n0\n\n\nENSG00000000419\n696\n660\n472\n951\n\n\nENSG00000000457\n59\n54\n44\n109\n\n\nENSG00000000460\n399\n405\n236\n445\n\n\nENSG00000000938\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n\nfamiliarity\nconveniency\nyou see more data"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#data-formats-1",
    "href": "topics/ggplot/slide_gg1.html#data-formats-1",
    "title": "Introduction to ggplot",
    "section": "Data Formats",
    "text": "Data Formats\n\nLong format\n\n\n\n\n\n\n\nSample_ID\nGene\ncount\n\n\n\n\nSample_1\nENSG00000000003\n321\n\n\nSample_1\nENSG00000000005\n0\n\n\nSample_1\nENSG00000000419\n696\n\n\nSample_1\nENSG00000000457\n59\n\n\nSample_1\nENSG00000000460\n399\n\n\nSample_1\nENSG00000000938\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSample_ID\nSample_Name\nTime\nReplicate\nCell\nGene\ncount\n\n\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000003\n321\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000005\n0\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000419\n696\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000457\n59\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000460\n399\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000938\n0"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#data-formats-2",
    "href": "topics/ggplot/slide_gg1.html#data-formats-2",
    "title": "Introduction to ggplot",
    "section": "Data Formats",
    "text": "Data Formats\n\nLong format\n\n\n\n\n\n\nSample_ID\nSample_Name\nTime\nReplicate\nCell\nGene\ncount\n\n\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000003\n321\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000005\n0\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000419\n696\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000457\n59\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000460\n399\n\n\nSample_1\nt0_A\nt0\nA\nA431\nENSG00000000938\n0\n\n\n\n\n\n\n\n\n\nEasier to add data to the existing\nMost databases store and maintain in long-formats due to its efficiency\nR tools like ggplot require data in long format"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#data-frames",
    "href": "topics/ggplot/slide_gg1.html#data-frames",
    "title": "Introduction to ggplot",
    "section": "Data Frames",
    "text": "Data Frames\n\nLet us take a quick look into data.frame in R:\n\n\n\nImported files are usually in data.frame\nStructured matrix with row.names and colnames\nProbably most used data.type in Biology!"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#important-tips",
    "href": "topics/ggplot/slide_gg1.html#important-tips",
    "title": "Introduction to ggplot",
    "section": "Important tips",
    "text": "Important tips\n\n? and ??\n\n? help manual for a particular function\n?? searches the entire R library for the term\nvignette(\"ggplot2\")\n\n\n\n\nTAB completion\n\nProbably most useful to avoid unnecessary error messages (and/or frustration)!\n\n\n\n\n\nCase sensitive\n\n\nprint(N)\n\nError: object 'N' not found\n\n\n\nprint(n)\n\n [1]  2  3  4  2  1  2  4  5 10 11  8  9"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#reading-files",
    "href": "topics/ggplot/slide_gg1.html#reading-files",
    "title": "Introduction to ggplot",
    "section": "Reading files",
    "text": "Reading files\n\n\n\n\n\niris-head-corrupted.csv\n\nSepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species\n5.1,3.5,1.4,0.2,setosa\n4.9,3,1.4,0.2,setosa\n4.7,3.2,1.3,0.2,setosa\n4.6,3.1,1.5,0.2,setosa\n5,3.6,#1.4,0.2,setosa\n5.4,3.9,1.7,0.4,setosa\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nReserved variables\n\nReserved variables like T, F, character and many others …\nHow can you check if something is a reserved variable?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#grammar-of-graphics",
    "href": "topics/ggplot/slide_gg1.html#grammar-of-graphics",
    "title": "Introduction to ggplot",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\n\n\n\n\n\n\n\nData: Input data\nGeom: A geometry representing data. Points, Lines etc\nAesthetics: Visual characteristics of the geometry. Size, Color, Shape etc\nScale: How visual characteristics are converted to display values\nStatistics: Statistical transformations. Counts, Means etc\nCoordinates: Numeric system to determine position of geometry. Cartesian, Polar etc\nFacets: Split data into subsets"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#building-a-graph",
    "href": "topics/ggplot/slide_gg1.html#building-a-graph",
    "title": "Introduction to ggplot",
    "section": "Building a graph",
    "text": "Building a graph"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#build-demo",
    "href": "topics/ggplot/slide_gg1.html#build-demo",
    "title": "Introduction to ggplot",
    "section": "Build-Demo",
    "text": "Build-Demo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#build-demo-1",
    "href": "topics/ggplot/slide_gg1.html#build-demo-1",
    "title": "Introduction to ggplot",
    "section": "Build-Demo",
    "text": "Build-Demo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#build-demo-2",
    "href": "topics/ggplot/slide_gg1.html#build-demo-2",
    "title": "Introduction to ggplot",
    "section": "Build-Demo",
    "text": "Build-Demo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#build-demo-3",
    "href": "topics/ggplot/slide_gg1.html#build-demo-3",
    "title": "Introduction to ggplot",
    "section": "Build-Demo",
    "text": "Build-Demo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#geoms",
    "href": "topics/ggplot/slide_gg1.html#geoms",
    "title": "Introduction to ggplot",
    "section": "Geoms",
    "text": "Geoms"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#geoms-1",
    "href": "topics/ggplot/slide_gg1.html#geoms-1",
    "title": "Introduction to ggplot",
    "section": "Geoms",
    "text": "Geoms\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#multiple-geoms",
    "href": "topics/ggplot/slide_gg1.html#multiple-geoms",
    "title": "Introduction to ggplot",
    "section": "Multiple geoms",
    "text": "Multiple geoms\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#aesthetics",
    "href": "topics/ggplot/slide_gg1.html#aesthetics",
    "title": "Introduction to ggplot",
    "section": "Aesthetics",
    "text": "Aesthetics\n\nAesthetic mapping vs aesthetic parameter"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#aesthetics-1",
    "href": "topics/ggplot/slide_gg1.html#aesthetics-1",
    "title": "Introduction to ggplot",
    "section": "Aesthetics",
    "text": "Aesthetics\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#scales",
    "href": "topics/ggplot/slide_gg1.html#scales",
    "title": "Introduction to ggplot",
    "section": "Scales",
    "text": "Scales\n\nIf you would like to change the default aesthetics\nscales: position, color, fill, size, shape, alpha, linetype\nsyntax: scale_&lt;aesthetic&gt;_&lt;type&gt;\n\n\nDiscrete Colors:"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#scales-discrete-colors",
    "href": "topics/ggplot/slide_gg1.html#scales-discrete-colors",
    "title": "Introduction to ggplot",
    "section": "Scales • Discrete Colors",
    "text": "Scales • Discrete Colors\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#scales-continuous-colors",
    "href": "topics/ggplot/slide_gg1.html#scales-continuous-colors",
    "title": "Introduction to ggplot",
    "section": "Scales • Continuous Colors",
    "text": "Scales • Continuous Colors\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#scales-shape",
    "href": "topics/ggplot/slide_gg1.html#scales-shape",
    "title": "Introduction to ggplot",
    "section": "Scales • Shape",
    "text": "Scales • Shape\n\nIn RStudio, type scale_, then press TAB\nSimilarly you can use it for shape, axis, fill, etc..\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#facets",
    "href": "topics/ggplot/slide_gg1.html#facets",
    "title": "Introduction to ggplot",
    "section": "Facets",
    "text": "Facets\n\nSplit to subplots based on variable(s)\nFacetting in one dimension"
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#facets-1",
    "href": "topics/ggplot/slide_gg1.html#facets-1",
    "title": "Introduction to ggplot",
    "section": "Facets",
    "text": "Facets\nfacet_wrap\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#facets-facet_grid",
    "href": "topics/ggplot/slide_gg1.html#facets-facet_grid",
    "title": "Introduction to ggplot",
    "section": "Facets • facet_grid",
    "text": "Facets • facet_grid\n\nFacetting in two dimensions\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "topics/ggplot/slide_gg1.html#section",
    "href": "topics/ggplot/slide_gg1.html#section",
    "title": "Introduction to ggplot",
    "section": "",
    "text": "Thank you. Questions?"
  },
  {
    "objectID": "topics/Shiny/lab_shiny3.html",
    "href": "topics/Shiny/lab_shiny3.html",
    "title": "RShiny Lab: Part III",
    "section": "",
    "text": "In this section of the lab, we will try to go into making an app step-by-step. The idea basically is to first have a plan/backbone of the page that we want and then to go on populating the page in a step-wise manner!"
  },
  {
    "objectID": "topics/Shiny/lab_shiny3.html#layout",
    "href": "topics/Shiny/lab_shiny3.html#layout",
    "title": "RShiny Lab: Part III",
    "section": "5.1 Layout",
    "text": "5.1 Layout\nWe need to first have a plan for the app page, which UI elements to include and how they will be laid out and structured. My plan is as shown in the preview image.\n\nThere is a horizontal top bar for the title and two columns below. The left column will contain the input widgets and control. The right column will contain the plot output. Since, this is a commonly used layout, it is available as a predefined function in shiny called pageWithSidebar(). It takes three arguments headerPanel, sidebarPanel and mainPanel which is self explanatory.\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(cowplot)\n\ncov_data &lt;- read.table(\"data/shiny_app_data.csv\", sep = \",\", header = T)\ncov_data$date &lt;- as.Date(cov_data$date)\n\n\nshinyApp(\nui=fluidPage(\n  pageWithSidebar(\n    headerPanel(),\n    sidebarPanel(),\n    mainPanel())\n  ),\nserver=function(input,output){}\n)"
  },
  {
    "objectID": "topics/Shiny/lab_shiny3.html#ui",
    "href": "topics/Shiny/lab_shiny3.html#ui",
    "title": "RShiny Lab: Part III",
    "section": "5.2 UI",
    "text": "5.2 UI\nThen we fill in the panels with widgets and contents. The way I planned this app is to have two input values from user which are the countries to visualize and the duration, as I mentioned earlier. In addition I would also like to have the Update button to control the reactivity of the plots as we have learnt in the earlier session. So, the plots should update only when the Update button is pressed. I would also like to give the user the option to download these animated plots as pdf image.\nLet us start with including the countries as a checkboxGroupInput() input widget. It is self-explanatory that the countries you choose in this group can be accessed in the server() to subset the data just for these countries. The function comes with its own header label, followed by choices and you can use selected to have the default choice.\n\nshinyApp(\n    ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"USA\"),\n            ),\n            mainPanel())\n    ),\n    server=function(input,output){}\n)\n\n\nNow that we got the countries-input sorted out, let us now add the duration of the period, a user would like to visualize the data for. We can add this by doing the following:\n\nshinyApp(\n    ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"USA\"),\n                h3(\"Duration\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           dateInput(\"in_duration_date_start\",\"From\",value=\"2020-02-15\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           dateInput(\"in_duration_date_end\",\"To\",value=\"2021-07-25\")\n                    )\n                )\n            ),\n            mainPanel())\n    ),\n    server=function(input,output){}\n)\n\n\nWe have defined a part of the side bar panel with a title Duration. fluidRow() is an html tag used to create rows. Above, in the side bar panel, a row is defined and two columns are defined inside. Each column is filled with date input widgets for start and end dates. We use the columns here to place date input widgets side by side. To place widgets one below the other, the columns can simply be removed.\nNow let us add the last part of the sidebar panel where we add actionButtons for us to be able to do Update and Download.\n\nshinyApp(\n    ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"USA\"),\n                h3(\"Duration\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           dateInput(\"in_duration_date_start\",\"From\",value=\"2020-02-15\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           dateInput(\"in_duration_date_end\",\"To\",value=\"2021-07-25\")\n                    )\n                ),\n                h3(\"Plot controls\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           actionButton(\"click\", \"Update\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           downloadButton('download', 'Download')\n                    ),\n                )\n            ),\n            mainPanel()\n            )\n    ),\n    server=function(input,output){}\n)\n\n\nNow we can finalize the UI part by adding the interface for the plotOutput()s. So basically we want two rows with two columns. We can add this by using fluidRow() as we have done before:\n\nshinyApp(\n    ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"USA\"),\n                h3(\"Duration\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           dateInput(\"in_duration_date_start\",\"From\",value=\"2020-02-15\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           dateInput(\"in_duration_date_end\",\"To\",value=\"2021-07-25\")\n                    )\n                ),\n                h3(\"Plot controls\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           actionButton(\"click\", \"Update\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           downloadButton('download', 'Download')\n                    ),\n                )\n            ),\n            mainPanel(\n                fluidRow(\n                    column(width = 6, plotOutput(\"casesPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"hospitalPlot\",  width=\"100%\"))\n                ),\n                fluidRow(\n                    column(width = 6, plotOutput(\"fatalPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"vaccinePlot\",  width=\"100%\"))\n                )\n            )\n            )\n    ),\n    server=function(input,output){}\n)\n\nThe UI is set for now! Now let us move-on to the server part and then eventually figure-out if we have to come back to the UI part again for changes!"
  },
  {
    "objectID": "topics/Shiny/lab_shiny3.html#server",
    "href": "topics/Shiny/lab_shiny3.html#server",
    "title": "RShiny Lab: Part III",
    "section": "5.3 Server",
    "text": "5.3 Server\nThe first thing that I would like to do here is to make sure that the inputs we get from the user are valid for our data!\n\n5.3.1 Error validation\nAs I have mentioned before, we have two inputs from the user and let us start with the country! We need to make sure that the user has selected at-least one country! For this, I would also make some changes in the ui part where I would like to show an error message, when the user has not selected a country! For this I would use conditionalPanel() where the panel appears if the condition is satisfied. Similarly, we want the selected duration to be between 2020-02-15 and 2021-07-25, so I would create another conditionalPanel() for this input. So, the ui part of the app would look like below:\n\n ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"USA\"),\n                conditionalPanel(condition = \"input.countries == ''\",\n                                 textOutput('error_country')),\n                h3(\"Duration\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           dateInput(\"in_duration_date_start\",\"From\",value=\"2020-02-15\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           dateInput(\"in_duration_date_end\",\"To\",value=\"2021-07-25\")\n                    )\n                ),\n                conditionalPanel(condition = \"input.in_duration_date_start &lt; as.Date('2020-02-15') || input.in_duration_date_end &lt; as.Date('2020-02-15') || input.in_duration_date_start &gt; as.Date('2021-07-25') || input.in_duration_date_end &gt; as.Date('2021-07-25')\",\n                                 textOutput('error_duration')),\n                h3(\"Plot controls\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           actionButton(\"click\", \"Update\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           downloadButton('download', 'Download')\n                    ),\n                )\n            ),\n            mainPanel(\n                fluidRow(\n                    column(width = 6, plotOutput(\"casesPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"hospitalPlot\",  width=\"100%\"))\n                ),\n                fluidRow(\n                    column(width = 6, plotOutput(\"fatalPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"vaccinePlot\",  width=\"100%\"))\n                )\n            )\n          )\n)\n\n Note the syntax with input.countries inside the conditionalPanel(). This is different from how you would normally use it as input$countries within the server.\nWe will render the output error message in the server part when those above mentioned conditions satisfy. This I would do it in combination with the observeEvent() function in relation to our Update button in the sidebar! So, as soon as that button is clicked, we need to check if the input values are good! The actual error validation part here I do it with the combination of functions validate() and need(). So, the server would like:\n\nserver=function(input,output){\n        \n        observeEvent(input$click, {\n            output$error_country &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$countries != '', 'You must select at-least one country'\n                    )\n                )\n            })\n            output$error_duration &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$in_duration_date_start &gt; as.Date('2020-02-14') & input$in_duration_date_end &gt; as.Date('2020-02-14') & input$in_duration_date_start &lt; as.Date('2021-07-26') & input$in_duration_date_end &lt; as.Date('2021-07-26'), \n                                'You must select the duration between 2020-02-15 and 2021-07-25'\n                    )\n                )\n            })\n            shiny::req(input$countries)\n        })\n}\n\n Note that the conditional statement with need() is a little different from the conditionalPanel(). The conditions we use in these two functions are basically the negation of each other. In need(): the options as we want and in conditionalPanel(): the options are suppose to check for the wrong values.\nI include req() as well for the countries, so that the plots are not made when there are no countries specified.\n\n\n5.3.2 Subset and plots\nWe subset the data of our interest simply using the filter() function from dplyr package.\n\nserver=function(input,output){\n        \n        observeEvent(input$click, {\n            output$error_country &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$countries != '', 'You must select at-least one country'\n                    )\n                )\n            })\n            output$error_duration &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$in_duration_date_start &gt; as.Date('2020-02-14') & input$in_duration_date_end &gt; as.Date('2020-02-14') & input$in_duration_date_start &lt; as.Date('2021-07-26') & input$in_duration_date_end &lt; as.Date('2021-07-26'), \n                                'You must select the duration between 2020-02-15 and 2021-07-25'\n                    )\n                )\n            })\n            shiny::req(input$countries)\n            \n            subset_covdata &lt;- cov_data %&gt;%\n                filter(location %in% input$countries) %&gt;%\n                filter(date &gt;= input$in_duration_date_start) %&gt;%\n                filter(date &lt;= input$in_duration_date_end)\n\n        })\n    }\n\nThen we use our plotting strategy that we already looked at before! We simply use that code for the four different plots that we want to populate in the mainPanel(). As you would expect, we will use the renderPlot() function to render these plots on the panel. So, finally we should have a properly working app based on the code below:\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(cowplot)\n\ncov_data &lt;- read.table(\"data/shiny_app_data.csv\", sep = \",\", header = T)\ncov_data$date &lt;- as.Date(cov_data$date)\n\nvalfn_country &lt;- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"You must select at-least one country\")\nvalfn_date &lt;- function(x) if(x &lt; as.Date('2020-02-15') | x &gt; as.Date('2021-07-25')) return(\"You must select the 'from' and 'to' dates between 2020-02-15 and 2021-07-25\")\n\nshinyApp(\n    ui=fluidPage(\n        pageWithSidebar(\n            headerPanel(title=\"Personalized Visualization of the SARS-Cov-II Pandemic\",windowTitle=\"Covid Data\"),\n            sidebarPanel(\n                checkboxGroupInput(\"countries\", label = h3(\"Countries\"), \n                                   choices = list(\"France\" = \"France\", \"Germany\" = \"Germany\", \"India\" = \"India\", \"Sweden\" = \"Sweden\", \"UK\" = \"UK\", \"USA\" = \"USA\"),\n                                   selected = \"France\"),\n                conditionalPanel(condition = \"input.countries == ''\",\n                                 textOutput('error_country')),\n                h3(\"Duration\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           dateInput(\"in_duration_date_start\",\"From\",value=\"2020-02-15\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           dateInput(\"in_duration_date_end\",\"To\",value=\"2021-07-25\")\n                    )\n                ),\n                conditionalPanel(condition = \"input.in_duration_date_start &lt; as.Date('2020-02-15') || input.in_duration_date_end &lt; as.Date('2020-02-15') || input.in_duration_date_start &gt; as.Date('2021-07-25') || input.in_duration_date_end &gt; as.Date('2021-07-25')\",\n                                 textOutput('error_duration')),\n                h3(\"Plot controls\"),\n                fluidRow(\n                    column(6,style=list(\"padding-right: 5px;\"),\n                           actionButton(\"click\", \"Update\")\n                    ),\n                    column(6,style=list(\"padding-left: 5px;\"),\n                           downloadButton('download', 'Download')\n                    ),\n                )\n            ),\n            mainPanel(\n                fluidRow(\n                    column(width = 6, plotOutput(\"casesPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"hospitalPlot\",  width=\"100%\"))\n                ),\n                fluidRow(\n                    column(width = 6, plotOutput(\"fatalPlot\",  width=\"100%\")),\n                    column(width = 6, plotOutput(\"vaccinePlot\",  width=\"100%\"))\n                )\n            )\n            )\n    ),\n    server=function(input,output){\n        \n        observeEvent(input$click, {\n            output$error_country &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$countries != '', 'You must select at-least one country'\n                    )\n                )\n            })\n            output$error_duration &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$in_duration_date_start &gt; as.Date('2020-02-14') & input$in_duration_date_end &gt; as.Date('2020-02-14') & input$in_duration_date_start &lt; as.Date('2021-07-26') & input$in_duration_date_end &lt; as.Date('2021-07-26'), \n                                'You must select the duration between 2020-02-15 and 2021-07-25'\n                    )\n                )\n            })\n            shiny::req(input$countries)\n            \n            subset_covdata &lt;- cov_data %&gt;%\n                filter(location %in% input$countries) %&gt;%\n                filter(date &gt;= input$in_duration_date_start) %&gt;%\n                filter(date &lt;= input$in_duration_date_end)\n            \n            p1 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_cases_per_million, group = location, color = location)) +\n                geom_line() +\n                theme_bw() +\n                scale_x_date(date_labels = \"%b-%Y\") \n            \n            output$casesPlot &lt;- renderPlot({p1})\n            \n            p2 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=icu_patients_per_million, group = location, color = location)) +\n                geom_line() +\n                theme_bw() +\n                scale_x_date(date_labels = \"%b-%Y\") \n            \n            output$hospitalPlot &lt;- renderPlot({p2})\n            \n            p3 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_deaths_per_million, group = location, color = location)) +\n                geom_line() +\n                theme_bw() +\n                scale_x_date(date_labels = \"%b-%Y\") \n            \n            output$fatalPlot &lt;- renderPlot({p3})\n            \n            p4 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=people_vaccinated_per_hundred, group = location, color = location)) +\n                geom_line() +\n                theme_bw() +\n                scale_x_date(date_labels = \"%b-%Y\") \n            \n            output$vaccinePlot &lt;- renderPlot({p4})\n\n                \n        })\n        \n        \n    }\n)\n\n\nNow let us make these plots look a little bit more prettier!\n\np1 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_cases_per_million, group = location, color = location)) +\n                geom_line(show.legend = F) +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"New cases per million\")\n            \n            \n            output$casesPlot &lt;- renderPlot({p1})\n            \n            p2 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=icu_patients_per_million, group = location, color = location)) +\n                geom_line() +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"ICU admissions per million\")\n            \n            output$hospitalPlot &lt;- renderPlot({p2})\n            \n            p3 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_deaths_per_million, group = location, color = location)) +\n                geom_line(show.legend = F) +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"Fatalities per million\")\n            \n            output$fatalPlot &lt;- renderPlot({p3})\n            \n            p4 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=people_vaccinated_per_hundred, group = location, color = location)) +\n                geom_line() +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"Percent vaccinated\")\n            \n            output$vaccinePlot &lt;- renderPlot({p4})\n\n\n\n5.3.3 Downloading\nNow let us look into the last part of the app, which is to download these plots together in a PDF document. For this we use the function downloadHandler().\n\nserver=function(input,output){\n        \n        observeEvent(input$click, {\n            output$error_country &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$countries != '', 'You must select at-least one country'\n                    )\n                )\n            })\n            output$error_duration &lt;- renderText({\n                shiny::validate(\n                    shiny::need(input$in_duration_date_start &gt; as.Date('2020-02-14') & input$in_duration_date_end &gt; as.Date('2020-02-14') & input$in_duration_date_start &lt; as.Date('2021-07-26') & input$in_duration_date_end &lt; as.Date('2021-07-26'), \n                                'You must select the duration between 2020-02-15 and 2021-07-25'\n                    )\n                )\n            })\n            shiny::req(input$countries)\n            \n            subset_covdata &lt;- cov_data %&gt;%\n                filter(location %in% input$countries) %&gt;%\n                filter(date &gt;= input$in_duration_date_start) %&gt;%\n                filter(date &lt;= input$in_duration_date_end)\n            \n            p1 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_cases_per_million, group = location, color = location)) +\n                geom_line(show.legend = F) +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"New cases per million\")\n            \n            \n            output$casesPlot &lt;- renderPlot({p1})\n            \n            p2 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=icu_patients_per_million, group = location, color = location)) +\n                geom_line() +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"ICU admissions per million\")\n            \n            output$hospitalPlot &lt;- renderPlot({p2})\n            \n            p3 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=new_deaths_per_million, group = location, color = location)) +\n                geom_line(show.legend = F) +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"Fatalities per million\")\n            \n            output$fatalPlot &lt;- renderPlot({p3})\n            \n            p4 &lt;- subset_covdata %&gt;%\n                ggplot(aes(x= date, y=people_vaccinated_per_hundred, group = location, color = location)) +\n                geom_line() +\n                theme_bw(base_size = 16) +\n                scale_x_date(date_labels = \"%b-%Y\") +\n                xlab(label = \"Time-Line\") +\n                theme(axis.title.y = element_blank(), legend.title = element_blank()) +\n                ggtitle(label = \"Percent vaccinated\")\n            \n            output$vaccinePlot &lt;- renderPlot({p4})\n            \n            output$download &lt;- downloadHandler(\n                filename =\"Personal_covdata.pdf\",\n                content = function(file){\n                    pdf(NULL)\n                    #plot_grid(p1, p2, p3, p4, nrow = 2)\n                    ggsave(file, plot=plot_grid(p1, p2, p3, p4, nrow = 2), dpi = 300, width = 10, height = 8, units = \"in\")\n                }\n            )\n            \n        })\n}\n\n Notice that the downloadHandler() is inside the observeEvent(), so that the values and the plots can be accessed smoothly! Here, I also show an example of how you can use ggsave() and plot_grid() within the download handler."
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html",
    "href": "topics/ggplot/lab_gg2.html",
    "title": "Advanced ggplot",
    "section": "",
    "text": "Now that we have covered the important aspects of ggplot, meaning getting the actual plot you wanted, let us now look into secondary elements of the plot."
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#breaks",
    "href": "topics/ggplot/lab_gg2.html#breaks",
    "title": "Advanced ggplot",
    "section": "1.1 Breaks",
    "text": "1.1 Breaks\nIf we look at the iris data plot that we made before:\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\nThe continuous x axis breaks are with 2,4,6 and so on. If we would like to have 1,2,3… We change this using scale_x_continuous() and breaks.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\") +\n  scale_x_continuous(breaks = 1:7)\n\n\n\n\n\n\n\n\nYou can do the same with y-axis.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\") +\n  scale_x_continuous(breaks = 1:7) +\n  scale_y_continuous(breaks = seq(0,3,0.5))"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#limits",
    "href": "topics/ggplot/lab_gg2.html#limits",
    "title": "Advanced ggplot",
    "section": "1.2 Limits",
    "text": "1.2 Limits\nBy using limits, we can also decide on the parts to plot to be shown:\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species)) +\n  geom_smooth(method=\"lm\") +\n  scale_x_continuous(limits=c(3, 7))\n\n\n\n\n\n\n\n\nWe can do the same with discrete x values like in the case of our gene counts dataset.\n\ngc_long %&gt;% \n  group_by(Time, Replicate) %&gt;% \n  summarise(mean=mean(log10(count +1)),se=se(log10(count +1))) %&gt;%\n  ggplot(aes(x=Time, y=mean, fill = Replicate)) + \n  geom_col() + \n  scale_x_discrete(limits=c(\"t0\",\"t24\"))\n\n\n\n\n\n\n\n\nOne can also use xlim() and ylim() functions that function the same as limits with scale_x_continous() or scale_x_discrete()"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#names",
    "href": "topics/ggplot/lab_gg2.html#names",
    "title": "Advanced ggplot",
    "section": "1.3 Names",
    "text": "1.3 Names\nYou can also customize the axis labels using the name option within scale_x_continous and scale_y_continous.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\") +\n  scale_x_continuous(name = \"Length\", breaks = 1:7) +\n  scale_y_continuous(name = \"Width\", breaks = seq(0,3,0.5))\n\n\n\n\n\n\n\n\nwith labels in combination with the scales package, one can change or make the unit of the axis look more comprehensible, when needed. Like using percentage option or scientific option.\n\nlibrary(scales)\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\") +\n  scale_y_continuous(name = \"Width\", breaks = seq(0,3,0.5), labels = scientific)"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#editing-legends",
    "href": "topics/ggplot/lab_gg2.html#editing-legends",
    "title": "Advanced ggplot",
    "section": "2.1 Editing legends",
    "text": "2.1 Editing legends\nThe legends can be edited by scale_&lt;aesthetic&gt;_&lt;discrete or continous&gt; function that we have been using. Take the below figure for example, we have the Sepal.Width and the Species with the size and color aestheitcs respectively.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\nLet’s try to edit the legends here like mentioned before:\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(size=Sepal.Width, color=Species))+\n  geom_smooth(method=\"lm\") +\n  scale_size_continuous(name = \"Width of Sepal\") +\n  scale_color_discrete(name = \"Organism\", labels = c(\"Iris setosa\", \"Iris versicolor\", \"Iris virginica\"))"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#moving-legends",
    "href": "topics/ggplot/lab_gg2.html#moving-legends",
    "title": "Advanced ggplot",
    "section": "2.2 Moving legends",
    "text": "2.2 Moving legends\nLegends can be moved around using theme.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width)) +\n  theme(legend.position=\"top\",\n        legend.justification=\"right\")\n\n\n\n\n\n\n\n\nLegend rows can be controlled in a finer manner.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  guides(size=guide_legend(nrow=2,byrow=TRUE),\n         color=guide_legend(nrow=3,byrow=T))+\n  theme(legend.position=\"top\",\n        legend.justification=\"right\")"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#axis-style",
    "href": "topics/ggplot/lab_gg2.html#axis-style",
    "title": "Advanced ggplot",
    "section": "3.1 Axis style",
    "text": "3.1 Axis style\nYou can change the style of the axis texts in the following way:\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width)) +\n  geom_point(aes(color=Species,size=Sepal.Width)) +\n  scale_x_continuous(name = \"Length\", breaks = 1:7) +\n  scale_y_continuous(name = \"Width\", breaks = seq(0,3,0.5)) +\n  theme(axis.text.x = element_text(face=\"bold\", color=\"#993333\", size=14, angle=45), \n        axis.text.y = element_text(face=\"bold\", color=\"#993333\", size=14, angle=45))\n\n\n\n\n\n\n\n\nIt is also possible hide the ticks.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width)) +\n  geom_point(aes(color=Species,size=Sepal.Width)) +\n  scale_x_continuous(name = \"Length\", breaks = 1:7) +\n  scale_y_continuous(name = \"Width\", breaks = seq(0,3,0.5)) +\n  theme(axis.text.x = element_text(face=\"bold\", color=\"#993333\", size=14, angle=45), \n        axis.text.y = element_text(face=\"bold\", color=\"#993333\", size=14, angle=45), \n        axis.ticks = element_blank())\n\n\n\n\n\n\n\n\nThere are many things one can use to style the axis and/or axis labels. Just use ?theme() to look for all the different one can use to stylize the plots."
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#different-themes",
    "href": "topics/ggplot/lab_gg2.html#different-themes",
    "title": "Advanced ggplot",
    "section": "3.2 Different themes",
    "text": "3.2 Different themes\nLet’s consider the plot below and save it as an object P for the sake of simplicity.\n\nP &lt;- gc_long %&gt;% \n  group_by(Time, Replicate) %&gt;% \n  summarise(mean=mean(log10(count +1)),se=se(log10(count +1))) %&gt;%\n  ggplot(aes(x= Time, y= mean, fill = Replicate)) + \n  geom_col(position = position_dodge2()) +\n  geom_errorbar(aes(ymin=mean-se, ymax=mean+se), position = position_dodge2(.9, padding = .6)) +\n  theme(axis.ticks = element_blank())\nP\n\n\n\n\n\n\n\n\n\n3.2.1 Lighter themes\ntheme_light(), theme_minimal(), theme_classic() and theme_bw() are a couple of themes that are used very often in publications.\n\nP + theme_bw(base_size = 16)\n\n\n\n\n\n\n\n\n\nP + theme_minimal(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n3.2.2 ggthemes package\nLet’s look into some of the fancier themes that comes in this package\n\nQ &lt;- ggplot(data = gc_long, mapping = aes(x = Sample_Name, y = log10(count + 1), fill = Time)) + geom_boxplot()\nQ  \n\n\n\n\n\n\n\n\nUsing the theme_tufte()\n\nlibrary(ggthemes)\nQ + theme_tufte()\n\n\n\n\n\n\n\n\n\nQ + theme_economist() + \n  scale_fill_economist()\n\n\n\n\n\n\n\n\n\nQ + theme_stata() +\n  scale_fill_stata()"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#plot_grid",
    "href": "topics/ggplot/lab_gg2.html#plot_grid",
    "title": "Advanced ggplot",
    "section": "5.1 plot_grid",
    "text": "5.1 plot_grid\nOne can use the simple plot_grid() function from the cowplot.\n\nlibrary(cowplot)\nplot_grid(p1, p2)\n\n\n\n\n\n\n\n\nYou can also do some simple customizations using nrow or ncol to specify the number of rows and columns and provide labels to those plots as well.\n\nplot_grid(p1, p2, nrow = 2, labels = c(\"A\", \"B\"))"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#ggdraw-and-draw_plot",
    "href": "topics/ggplot/lab_gg2.html#ggdraw-and-draw_plot",
    "title": "Advanced ggplot",
    "section": "5.2 ggdraw and draw_plot",
    "text": "5.2 ggdraw and draw_plot\nIn cowplot, you can also customize the dimentions of the plots in a much more controlled fashion. For this one starts with ggdraw() which initiates the drawing “canvas” followed by draw_plot() that you use to draw the different plots on to the canvas.\nHere is how the dimentions of the empty canvas looks like: \nFrom here, you can draw your plots in the way you want using these dimensions. AN example is shown below, where we plot C and D similar to the plot above:\n\nggdraw() +\n  draw_plot(p3, x = 0, y = 0, width = 1, height = .5) +\n  draw_plot(p4, x = 0, y = .5, width = 1, height = .5) \n\n\n\n\n\n\n\n\nYou can also add “labels” to these figures using draw_plot_label() with the same dimensions.\n\nggdraw() +\n  draw_plot(p3, x = 0, y = 0.5, width = 1, height = .5) +\n  draw_plot(p4, x = 0, y = 0, width = 1, height = .5) +\n  draw_plot_label(label = c(\"A\", \"B\"), size = 15, x = c(0,0), y = c(1, 0.5))\n\n\n\n\n\n\n\n\nIt is easier to draw three (or any odd number) plots in a neat way using this function compared to plot_grid()\n\nggdraw() +\n  draw_plot(p3, x = 0, y = 0.5, width = 0.5, height = 0.5) +\n  draw_plot(p4, x = 0.5, y = 0.5, width = 0.5, height = 0.5) +\n  draw_plot(p2, x = 0, y = 0, width = 1, height = 0.5) +\n  draw_plot_label(label = c(\"A\", \"B\", \"C\"), size = 15, x = c(0,0.5,0), y = c(1, 1,0.5))"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#ggarrange",
    "href": "topics/ggplot/lab_gg2.html#ggarrange",
    "title": "Advanced ggplot",
    "section": "6.1 ggarrange",
    "text": "6.1 ggarrange\nThe package ggpubr comes with quite a few functions that can be very useful to make comprehensive figures. To start with the simple function, let’s start with ggarrange() that is used to put plots together.\n\nlibrary(ggpubr)\nggarrange(p3, p4, labels = c(\"A\", \"B\"), nrow = 2)\n\n\n\n\n\n\n\n\nOne of the nicer things with ggarrange() is that you can automatically have common legends that are shared between the figures.\n\nggarrange(p3, p4, labels = c(\"A\", \"B\"), nrow = 2, common.legend = TRUE, legend = \"right\")"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#mixing-text-and-table-with-figures",
    "href": "topics/ggplot/lab_gg2.html#mixing-text-and-table-with-figures",
    "title": "Advanced ggplot",
    "section": "6.2 Mixing text and table with Figures",
    "text": "6.2 Mixing text and table with Figures\nYou can include tables and even normal texts to any figure using ggtexttable() and ggparagraph(). Let us look into adding a table that we saw in the previous exercise with the gene counts dataset.\n\ngc_table &lt;- gc_long %&gt;% \n  group_by(Time) %&gt;% \n  summarise(mean=mean(log10(count +1)),se=se(log10(count +1)))\n\ntab1 &lt;- ggtexttable(gc_table, rows = NULL, \n                        theme = ttheme(\"mOrange\"))\ngc_text &lt;- paste(\"In the experiment, RNA was extracted at four time points:\", \n                 \"before the gefinitib treatment (t=0), and two, six and twenty-four hours\",\n                 \"after treatment (t=2, t=6, t=24, respectively).\", sep = \" \")\n\ntex1 &lt;- ggparagraph(text = gc_text, face = \"italic\", size = 11, color = \"black\")\n\n\n\n\n\n\n\nNote\n\n\n\nHere, for the text part, paste() has been used just to make it a bit easier to show here in the code. It could be used without the paste() command as well.\n\n\n\nggarrange(ggarrange(p1, p2, nrow = 2, labels = c(\"A\", \"B\"), common.legend = TRUE, legend = \"top\"),\n          ggarrange(tab1, tex1, nrow = 2),\n          ncol = 2,\n          widths = c(2, 1))"
  },
  {
    "objectID": "topics/ggplot/lab_gg2.html#multiple-page",
    "href": "topics/ggplot/lab_gg2.html#multiple-page",
    "title": "Advanced ggplot",
    "section": "6.3 Multiple-page",
    "text": "6.3 Multiple-page\nWith ggarrange() it is also possible to make multiple-page plots. If you are for example making a report of many different figures this can come quite handy. Then you can use ggexport() to export these figures in a multi-page pdf.\n\nmulti.page &lt;- ggarrange(p1, p2, p3, p4,\n                        nrow = 1, ncol = 1)\nggexport(multi.page, filename = \"multi.page.ggplot2.pdf\")\n\n Note   From this multi.page R object (which is of class list) , you can get the indivdual plots by multi.page[[1]], multi.page[[2]] and so on."
  }
]